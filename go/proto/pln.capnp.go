// Code generated by capnpc-go. DO NOT EDIT.

package proto

import (
	strconv "strconv"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type PLN struct{ capnp.Struct }
type PLN_Which uint16

const (
	PLN_Which_unset      PLN_Which = 0
	PLN_Which_plnList    PLN_Which = 1
	PLN_Which_plnListReq PLN_Which = 2
)

func (w PLN_Which) String() string {
	const s = "unsetplnListplnListReq"
	switch w {
	case PLN_Which_unset:
		return s[0:5]
	case PLN_Which_plnList:
		return s[5:12]
	case PLN_Which_plnListReq:
		return s[12:22]

	}
	return "PLN_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// PLN_TypeID is the unique identifier for the type PLN.
const PLN_TypeID = 0xde546c9c1a032c93

func NewPLN(s *capnp.Segment) (PLN, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return PLN{st}, err
}

func NewRootPLN(s *capnp.Segment) (PLN, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return PLN{st}, err
}

func ReadRootPLN(msg *capnp.Message) (PLN, error) {
	root, err := msg.RootPtr()
	return PLN{root.Struct()}, err
}

func (s PLN) String() string {
	str, _ := text.Marshal(0xde546c9c1a032c93, s.Struct)
	return str
}

func (s PLN) Which() PLN_Which {
	return PLN_Which(s.Struct.Uint16(8))
}
func (s PLN) Id() uint64 {
	return s.Struct.Uint64(0)
}

func (s PLN) SetId(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s PLN) SetUnset() {
	s.Struct.SetUint16(8, 0)

}

func (s PLN) PlnList() (PlnList, error) {
	if s.Struct.Uint16(8) != 1 {
		panic("Which() != plnList")
	}
	p, err := s.Struct.Ptr(0)
	return PlnList{Struct: p.Struct()}, err
}

func (s PLN) HasPlnList() bool {
	if s.Struct.Uint16(8) != 1 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PLN) SetPlnList(v PlnList) error {
	s.Struct.SetUint16(8, 1)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewPlnList sets the plnList field to a newly
// allocated PlnList struct, preferring placement in s's segment.
func (s PLN) NewPlnList() (PlnList, error) {
	s.Struct.SetUint16(8, 1)
	ss, err := NewPlnList(s.Struct.Segment())
	if err != nil {
		return PlnList{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s PLN) PlnListReq() (PlnListReq, error) {
	if s.Struct.Uint16(8) != 2 {
		panic("Which() != plnListReq")
	}
	p, err := s.Struct.Ptr(0)
	return PlnListReq{Struct: p.Struct()}, err
}

func (s PLN) HasPlnListReq() bool {
	if s.Struct.Uint16(8) != 2 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PLN) SetPlnListReq(v PlnListReq) error {
	s.Struct.SetUint16(8, 2)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewPlnListReq sets the plnListReq field to a newly
// allocated PlnListReq struct, preferring placement in s's segment.
func (s PLN) NewPlnListReq() (PlnListReq, error) {
	s.Struct.SetUint16(8, 2)
	ss, err := NewPlnListReq(s.Struct.Segment())
	if err != nil {
		return PlnListReq{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// PLN_List is a list of PLN.
type PLN_List struct{ capnp.List }

// NewPLN creates a new list of PLN.
func NewPLN_List(s *capnp.Segment, sz int32) (PLN_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return PLN_List{l}, err
}

func (s PLN_List) At(i int) PLN { return PLN{s.List.Struct(i)} }

func (s PLN_List) Set(i int, v PLN) error { return s.List.SetStruct(i, v.Struct) }

func (s PLN_List) String() string {
	str, _ := text.MarshalList(0xde546c9c1a032c93, s.List)
	return str
}

// PLN_Promise is a wrapper for a PLN promised by a client call.
type PLN_Promise struct{ *capnp.Pipeline }

func (p PLN_Promise) Struct() (PLN, error) {
	s, err := p.Pipeline.Struct()
	return PLN{s}, err
}

func (p PLN_Promise) PlnList() PlnList_Promise {
	return PlnList_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p PLN_Promise) PlnListReq() PlnListReq_Promise {
	return PlnListReq_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type PlnList struct{ capnp.Struct }

// PlnList_TypeID is the unique identifier for the type PlnList.
const PlnList_TypeID = 0xb69cc9dbaa366e2c

func NewPlnList(s *capnp.Segment) (PlnList, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return PlnList{st}, err
}

func NewRootPlnList(s *capnp.Segment) (PlnList, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return PlnList{st}, err
}

func ReadRootPlnList(msg *capnp.Message) (PlnList, error) {
	root, err := msg.RootPtr()
	return PlnList{root.Struct()}, err
}

func (s PlnList) String() string {
	str, _ := text.Marshal(0xb69cc9dbaa366e2c, s.Struct)
	return str
}

func (s PlnList) L() (PlnListEntry_List, error) {
	p, err := s.Struct.Ptr(0)
	return PlnListEntry_List{List: p.List()}, err
}

func (s PlnList) HasL() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PlnList) SetL(v PlnListEntry_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewL sets the l field to a newly
// allocated PlnListEntry_List, preferring placement in s's segment.
func (s PlnList) NewL(n int32) (PlnListEntry_List, error) {
	l, err := NewPlnListEntry_List(s.Struct.Segment(), n)
	if err != nil {
		return PlnListEntry_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// PlnList_List is a list of PlnList.
type PlnList_List struct{ capnp.List }

// NewPlnList creates a new list of PlnList.
func NewPlnList_List(s *capnp.Segment, sz int32) (PlnList_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return PlnList_List{l}, err
}

func (s PlnList_List) At(i int) PlnList { return PlnList{s.List.Struct(i)} }

func (s PlnList_List) Set(i int, v PlnList) error { return s.List.SetStruct(i, v.Struct) }

func (s PlnList_List) String() string {
	str, _ := text.MarshalList(0xb69cc9dbaa366e2c, s.List)
	return str
}

// PlnList_Promise is a wrapper for a PlnList promised by a client call.
type PlnList_Promise struct{ *capnp.Pipeline }

func (p PlnList_Promise) Struct() (PlnList, error) {
	s, err := p.Pipeline.Struct()
	return PlnList{s}, err
}

type PlnListEntry struct{ capnp.Struct }

// PlnListEntry_TypeID is the unique identifier for the type PlnListEntry.
const PlnListEntry_TypeID = 0xd89376584f3df232

func NewPlnListEntry(s *capnp.Segment) (PlnListEntry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return PlnListEntry{st}, err
}

func NewRootPlnListEntry(s *capnp.Segment) (PlnListEntry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return PlnListEntry{st}, err
}

func ReadRootPlnListEntry(msg *capnp.Message) (PlnListEntry, error) {
	root, err := msg.RootPtr()
	return PlnListEntry{root.Struct()}, err
}

func (s PlnListEntry) String() string {
	str, _ := text.Marshal(0xd89376584f3df232, s.Struct)
	return str
}

func (s PlnListEntry) PgnId() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s PlnListEntry) HasPgnId() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PlnListEntry) PgnIdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s PlnListEntry) SetPgnId(v string) error {
	return s.Struct.SetText(0, v)
}

func (s PlnListEntry) Ia() uint64 {
	return s.Struct.Uint64(0)
}

func (s PlnListEntry) SetIa(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s PlnListEntry) Raw() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s PlnListEntry) HasRaw() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s PlnListEntry) SetRaw(v []byte) error {
	return s.Struct.SetData(1, v)
}

// PlnListEntry_List is a list of PlnListEntry.
type PlnListEntry_List struct{ capnp.List }

// NewPlnListEntry creates a new list of PlnListEntry.
func NewPlnListEntry_List(s *capnp.Segment, sz int32) (PlnListEntry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return PlnListEntry_List{l}, err
}

func (s PlnListEntry_List) At(i int) PlnListEntry { return PlnListEntry{s.List.Struct(i)} }

func (s PlnListEntry_List) Set(i int, v PlnListEntry) error { return s.List.SetStruct(i, v.Struct) }

func (s PlnListEntry_List) String() string {
	str, _ := text.MarshalList(0xd89376584f3df232, s.List)
	return str
}

// PlnListEntry_Promise is a wrapper for a PlnListEntry promised by a client call.
type PlnListEntry_Promise struct{ *capnp.Pipeline }

func (p PlnListEntry_Promise) Struct() (PlnListEntry, error) {
	s, err := p.Pipeline.Struct()
	return PlnListEntry{s}, err
}

type PlnListReq struct{ capnp.Struct }

// PlnListReq_TypeID is the unique identifier for the type PlnListReq.
const PlnListReq_TypeID = 0xd0e6dc9b9100a2c1

func NewPlnListReq(s *capnp.Segment) (PlnListReq, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return PlnListReq{st}, err
}

func NewRootPlnListReq(s *capnp.Segment) (PlnListReq, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return PlnListReq{st}, err
}

func ReadRootPlnListReq(msg *capnp.Message) (PlnListReq, error) {
	root, err := msg.RootPtr()
	return PlnListReq{root.Struct()}, err
}

func (s PlnListReq) String() string {
	str, _ := text.Marshal(0xd0e6dc9b9100a2c1, s.Struct)
	return str
}

func (s PlnListReq) Action() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s PlnListReq) HasAction() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PlnListReq) ActionBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s PlnListReq) SetAction(v string) error {
	return s.Struct.SetText(0, v)
}

// PlnListReq_List is a list of PlnListReq.
type PlnListReq_List struct{ capnp.List }

// NewPlnListReq creates a new list of PlnListReq.
func NewPlnListReq_List(s *capnp.Segment, sz int32) (PlnListReq_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return PlnListReq_List{l}, err
}

func (s PlnListReq_List) At(i int) PlnListReq { return PlnListReq{s.List.Struct(i)} }

func (s PlnListReq_List) Set(i int, v PlnListReq) error { return s.List.SetStruct(i, v.Struct) }

func (s PlnListReq_List) String() string {
	str, _ := text.MarshalList(0xd0e6dc9b9100a2c1, s.List)
	return str
}

// PlnListReq_Promise is a wrapper for a PlnListReq promised by a client call.
type PlnListReq_Promise struct{ *capnp.Pipeline }

func (p PlnListReq_Promise) Struct() (PlnListReq, error) {
	s, err := p.Pipeline.Struct()
	return PlnListReq{s}, err
}

const schema_ec61d161ed550c49 = "x\xdal\x92?k\x14Q\x14\xc5\xcf\xb9o7k\xc2" +
	"\x8e\xces\xb7J\xb3 \x96A0\x85\xc5\x82l\x10\x17" +
	"\\Xun\x88 b\xe1\x90]\xe2\xc08N6\xe3" +
	"\xbf\xcaO\x90\"\xa6\x12c\xa1e\x1a;\x0b;K\x0b" +
	"\xd1\x14\x82\xa0Xj\xa3\x85\x82\x85\x88>y\xae\x9b\x0d" +
	"f\xab\x03\xf7\x9ew~\xe7\xc1\x0d_-\xc8\xf1\xf2\x0a" +
	"\x01\x0d\xcbSn.;\xb1\xfd\xee\xc5\xd6S\xd8\x19\xba" +
	"N\xf5\xc2\x97x'\xfe\x8c2+\x80\xbd\x7f\xcf>\xf2" +
	"\xfa\xb0\x05\xfe|\xfex\xe3\xc1\xfb\x8f\xaf'\xd8^n" +
	"\xdb7^wZ\xa0\x9b\xffv\xf2\xfc\xc5\x9b\x9bo\xa1" +
	"3\xdc\xeb\x14\xef\xf8\xfa\xcc\xfe\xf0\xfa\xfd\x09\xe86\xe7" +
	"\xcc\xecV\xba\xf4\xc1;e\xecl\xb3bX\xaa\xads" +
	"P\xdb\xf0\xf1\xb5u~\x02]\x9ef\xc7\x96\xe3<c" +
	"\xde\x8c\xd2\xac\x9b\xac\xb1\x88H-\x99\x12P\"`\x83" +
	"\xc3\x80\x1e0\xd4\xa3B\xa6<\x08F\x86\x0c\xc7\x85@" +
	"?\xdc\x1ft\xa8X\xec\xaf\xfe\x97\xd5\xfc\x97U\x17\xb6" +
	"\xe2\xe5\"\xb9\x9e\xb1\x0aau\xd2\xfbV\xd1\xce\x8a\xc1" +
	"\x1d\x9fP\xddMh\xcf\x03\xba`\xa8]!Y\xa7\x9f" +
	"uf\x01=m\xa8\x91\xd0\x0a\xeb\x14\xc0\x9e=\x02\xe8" +
	"\x19C]\x126\xf2\x95\xac\xd3\x1b\x91L\x12s\x1a\xc2" +
	"i\xb02\x88o1\x800\xd8S\x00\x8d\xbc\x19u\xcf" +
	"yn\xb8\xcb\x8d=\xe3\xb2\xa1^\x15\x06tnH\xee" +
	"\xfb6W\x0c5\x15\x06\xf2\xdb\x0d\xd1\xc9)@{\x86" +
	"\x9a\x0b\x03\xf3\xcb\xd5i\x00{\xed\x12\xa0\xa9\xa1\xde\x16" +
	"\x9a\xa47\xaa\xd0\xb8\x91\xad\xf5\x0bL\xdd\xcd\xff~\xba" +
	"`8>\x1d\x90\xe1\xb0\x98\xdf,\xc2\xf4W\x19\x8e\x0e" +
	"f\xb8\xfc\x13\x00\x00\xff\xff\x1fh\x98\xff"

func init() {
	schemas.Register(schema_ec61d161ed550c49,
		0xb69cc9dbaa366e2c,
		0xd0e6dc9b9100a2c1,
		0xd89376584f3df232,
		0xde546c9c1a032c93)
}
