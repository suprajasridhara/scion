// Code generated by capnpc-go. DO NOT EDIT.

package proto

import (
	strconv "strconv"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type MS struct{ capnp.Struct }
type MS_Which uint16

const (
	MS_Which_unset        MS_Which = 0
	MS_Which_asActionReq  MS_Which = 1
	MS_Which_asActionRep  MS_Which = 2
	MS_Which_fullMapReq   MS_Which = 3
	MS_Which_fullMapRep   MS_Which = 4
	MS_Which_signedMSList MS_Which = 5
)

func (w MS_Which) String() string {
	const s = "unsetasActionReqasActionRepfullMapReqfullMapRepsignedMSList"
	switch w {
	case MS_Which_unset:
		return s[0:5]
	case MS_Which_asActionReq:
		return s[5:16]
	case MS_Which_asActionRep:
		return s[16:27]
	case MS_Which_fullMapReq:
		return s[27:37]
	case MS_Which_fullMapRep:
		return s[37:47]
	case MS_Which_signedMSList:
		return s[47:59]

	}
	return "MS_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// MS_TypeID is the unique identifier for the type MS.
const MS_TypeID = 0x9784eb1f78b48548

func NewMS(s *capnp.Segment) (MS, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return MS{st}, err
}

func NewRootMS(s *capnp.Segment) (MS, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return MS{st}, err
}

func ReadRootMS(msg *capnp.Message) (MS, error) {
	root, err := msg.RootPtr()
	return MS{root.Struct()}, err
}

func (s MS) String() string {
	str, _ := text.Marshal(0x9784eb1f78b48548, s.Struct)
	return str
}

func (s MS) Which() MS_Which {
	return MS_Which(s.Struct.Uint16(8))
}
func (s MS) Id() uint64 {
	return s.Struct.Uint64(0)
}

func (s MS) SetId(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s MS) SetUnset() {
	s.Struct.SetUint16(8, 0)

}

func (s MS) AsActionReq() (ASMapEntry, error) {
	if s.Struct.Uint16(8) != 1 {
		panic("Which() != asActionReq")
	}
	p, err := s.Struct.Ptr(0)
	return ASMapEntry{Struct: p.Struct()}, err
}

func (s MS) HasAsActionReq() bool {
	if s.Struct.Uint16(8) != 1 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s MS) SetAsActionReq(v ASMapEntry) error {
	s.Struct.SetUint16(8, 1)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewAsActionReq sets the asActionReq field to a newly
// allocated ASMapEntry struct, preferring placement in s's segment.
func (s MS) NewAsActionReq() (ASMapEntry, error) {
	s.Struct.SetUint16(8, 1)
	ss, err := NewASMapEntry(s.Struct.Segment())
	if err != nil {
		return ASMapEntry{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s MS) AsActionRep() (MSRepToken, error) {
	if s.Struct.Uint16(8) != 2 {
		panic("Which() != asActionRep")
	}
	p, err := s.Struct.Ptr(0)
	return MSRepToken{Struct: p.Struct()}, err
}

func (s MS) HasAsActionRep() bool {
	if s.Struct.Uint16(8) != 2 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s MS) SetAsActionRep(v MSRepToken) error {
	s.Struct.SetUint16(8, 2)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewAsActionRep sets the asActionRep field to a newly
// allocated MSRepToken struct, preferring placement in s's segment.
func (s MS) NewAsActionRep() (MSRepToken, error) {
	s.Struct.SetUint16(8, 2)
	ss, err := NewMSRepToken(s.Struct.Segment())
	if err != nil {
		return MSRepToken{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s MS) FullMapReq() (FullMapReq, error) {
	if s.Struct.Uint16(8) != 3 {
		panic("Which() != fullMapReq")
	}
	p, err := s.Struct.Ptr(0)
	return FullMapReq{Struct: p.Struct()}, err
}

func (s MS) HasFullMapReq() bool {
	if s.Struct.Uint16(8) != 3 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s MS) SetFullMapReq(v FullMapReq) error {
	s.Struct.SetUint16(8, 3)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewFullMapReq sets the fullMapReq field to a newly
// allocated FullMapReq struct, preferring placement in s's segment.
func (s MS) NewFullMapReq() (FullMapReq, error) {
	s.Struct.SetUint16(8, 3)
	ss, err := NewFullMapReq(s.Struct.Segment())
	if err != nil {
		return FullMapReq{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s MS) FullMapRep() (FullMapRep, error) {
	if s.Struct.Uint16(8) != 4 {
		panic("Which() != fullMapRep")
	}
	p, err := s.Struct.Ptr(0)
	return FullMapRep{Struct: p.Struct()}, err
}

func (s MS) HasFullMapRep() bool {
	if s.Struct.Uint16(8) != 4 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s MS) SetFullMapRep(v FullMapRep) error {
	s.Struct.SetUint16(8, 4)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewFullMapRep sets the fullMapRep field to a newly
// allocated FullMapRep struct, preferring placement in s's segment.
func (s MS) NewFullMapRep() (FullMapRep, error) {
	s.Struct.SetUint16(8, 4)
	ss, err := NewFullMapRep(s.Struct.Segment())
	if err != nil {
		return FullMapRep{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s MS) SignedMSList() (SignedMSList, error) {
	if s.Struct.Uint16(8) != 5 {
		panic("Which() != signedMSList")
	}
	p, err := s.Struct.Ptr(0)
	return SignedMSList{Struct: p.Struct()}, err
}

func (s MS) HasSignedMSList() bool {
	if s.Struct.Uint16(8) != 5 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s MS) SetSignedMSList(v SignedMSList) error {
	s.Struct.SetUint16(8, 5)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSignedMSList sets the signedMSList field to a newly
// allocated SignedMSList struct, preferring placement in s's segment.
func (s MS) NewSignedMSList() (SignedMSList, error) {
	s.Struct.SetUint16(8, 5)
	ss, err := NewSignedMSList(s.Struct.Segment())
	if err != nil {
		return SignedMSList{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// MS_List is a list of MS.
type MS_List struct{ capnp.List }

// NewMS creates a new list of MS.
func NewMS_List(s *capnp.Segment, sz int32) (MS_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return MS_List{l}, err
}

func (s MS_List) At(i int) MS { return MS{s.List.Struct(i)} }

func (s MS_List) Set(i int, v MS) error { return s.List.SetStruct(i, v.Struct) }

func (s MS_List) String() string {
	str, _ := text.MarshalList(0x9784eb1f78b48548, s.List)
	return str
}

// MS_Promise is a wrapper for a MS promised by a client call.
type MS_Promise struct{ *capnp.Pipeline }

func (p MS_Promise) Struct() (MS, error) {
	s, err := p.Pipeline.Struct()
	return MS{s}, err
}

func (p MS_Promise) AsActionReq() ASMapEntry_Promise {
	return ASMapEntry_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p MS_Promise) AsActionRep() MSRepToken_Promise {
	return MSRepToken_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p MS_Promise) FullMapReq() FullMapReq_Promise {
	return FullMapReq_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p MS_Promise) FullMapRep() FullMapRep_Promise {
	return FullMapRep_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p MS_Promise) SignedMSList() SignedMSList_Promise {
	return SignedMSList_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type ASMapEntry struct{ capnp.Struct }

// ASMapEntry_TypeID is the unique identifier for the type ASMapEntry.
const ASMapEntry_TypeID = 0xb63b553fb7bedc23

func NewASMapEntry(s *capnp.Segment) (ASMapEntry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return ASMapEntry{st}, err
}

func NewRootASMapEntry(s *capnp.Segment) (ASMapEntry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return ASMapEntry{st}, err
}

func ReadRootASMapEntry(msg *capnp.Message) (ASMapEntry, error) {
	root, err := msg.RootPtr()
	return ASMapEntry{root.Struct()}, err
}

func (s ASMapEntry) String() string {
	str, _ := text.Marshal(0xb63b553fb7bedc23, s.Struct)
	return str
}

func (s ASMapEntry) Ia() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s ASMapEntry) HasIa() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ASMapEntry) IaBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s ASMapEntry) SetIa(v string) error {
	return s.Struct.SetText(0, v)
}

func (s ASMapEntry) Ip() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(1)
	return capnp.TextList{List: p.List()}, err
}

func (s ASMapEntry) HasIp() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s ASMapEntry) SetIp(v capnp.TextList) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewIp sets the ip field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s ASMapEntry) NewIp(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s ASMapEntry) Timestamp() uint64 {
	return s.Struct.Uint64(0)
}

func (s ASMapEntry) SetTimestamp(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s ASMapEntry) Action() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s ASMapEntry) HasAction() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s ASMapEntry) ActionBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s ASMapEntry) SetAction(v string) error {
	return s.Struct.SetText(2, v)
}

// ASMapEntry_List is a list of ASMapEntry.
type ASMapEntry_List struct{ capnp.List }

// NewASMapEntry creates a new list of ASMapEntry.
func NewASMapEntry_List(s *capnp.Segment, sz int32) (ASMapEntry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return ASMapEntry_List{l}, err
}

func (s ASMapEntry_List) At(i int) ASMapEntry { return ASMapEntry{s.List.Struct(i)} }

func (s ASMapEntry_List) Set(i int, v ASMapEntry) error { return s.List.SetStruct(i, v.Struct) }

func (s ASMapEntry_List) String() string {
	str, _ := text.MarshalList(0xb63b553fb7bedc23, s.List)
	return str
}

// ASMapEntry_Promise is a wrapper for a ASMapEntry promised by a client call.
type ASMapEntry_Promise struct{ *capnp.Pipeline }

func (p ASMapEntry_Promise) Struct() (ASMapEntry, error) {
	s, err := p.Pipeline.Struct()
	return ASMapEntry{s}, err
}

type MSRepToken struct{ capnp.Struct }

// MSRepToken_TypeID is the unique identifier for the type MSRepToken.
const MSRepToken_TypeID = 0xf4d0e3fd031ba157

func NewMSRepToken(s *capnp.Segment) (MSRepToken, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return MSRepToken{st}, err
}

func NewRootMSRepToken(s *capnp.Segment) (MSRepToken, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return MSRepToken{st}, err
}

func ReadRootMSRepToken(msg *capnp.Message) (MSRepToken, error) {
	root, err := msg.RootPtr()
	return MSRepToken{root.Struct()}, err
}

func (s MSRepToken) String() string {
	str, _ := text.Marshal(0xf4d0e3fd031ba157, s.Struct)
	return str
}

func (s MSRepToken) SignedASEntry() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s MSRepToken) HasSignedASEntry() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s MSRepToken) SetSignedASEntry(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s MSRepToken) Timestamp() uint64 {
	return s.Struct.Uint64(0)
}

func (s MSRepToken) SetTimestamp(v uint64) {
	s.Struct.SetUint64(0, v)
}

// MSRepToken_List is a list of MSRepToken.
type MSRepToken_List struct{ capnp.List }

// NewMSRepToken creates a new list of MSRepToken.
func NewMSRepToken_List(s *capnp.Segment, sz int32) (MSRepToken_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return MSRepToken_List{l}, err
}

func (s MSRepToken_List) At(i int) MSRepToken { return MSRepToken{s.List.Struct(i)} }

func (s MSRepToken_List) Set(i int, v MSRepToken) error { return s.List.SetStruct(i, v.Struct) }

func (s MSRepToken_List) String() string {
	str, _ := text.MarshalList(0xf4d0e3fd031ba157, s.List)
	return str
}

// MSRepToken_Promise is a wrapper for a MSRepToken promised by a client call.
type MSRepToken_Promise struct{ *capnp.Pipeline }

func (p MSRepToken_Promise) Struct() (MSRepToken, error) {
	s, err := p.Pipeline.Struct()
	return MSRepToken{s}, err
}

type FullMapReq struct{ capnp.Struct }

// FullMapReq_TypeID is the unique identifier for the type FullMapReq.
const FullMapReq_TypeID = 0xeba5cc6f7f0c9fe8

func NewFullMapReq(s *capnp.Segment) (FullMapReq, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return FullMapReq{st}, err
}

func NewRootFullMapReq(s *capnp.Segment) (FullMapReq, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return FullMapReq{st}, err
}

func ReadRootFullMapReq(msg *capnp.Message) (FullMapReq, error) {
	root, err := msg.RootPtr()
	return FullMapReq{root.Struct()}, err
}

func (s FullMapReq) String() string {
	str, _ := text.Marshal(0xeba5cc6f7f0c9fe8, s.Struct)
	return str
}

func (s FullMapReq) Id() uint8 {
	return s.Struct.Uint8(0)
}

func (s FullMapReq) SetId(v uint8) {
	s.Struct.SetUint8(0, v)
}

// FullMapReq_List is a list of FullMapReq.
type FullMapReq_List struct{ capnp.List }

// NewFullMapReq creates a new list of FullMapReq.
func NewFullMapReq_List(s *capnp.Segment, sz int32) (FullMapReq_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return FullMapReq_List{l}, err
}

func (s FullMapReq_List) At(i int) FullMapReq { return FullMapReq{s.List.Struct(i)} }

func (s FullMapReq_List) Set(i int, v FullMapReq) error { return s.List.SetStruct(i, v.Struct) }

func (s FullMapReq_List) String() string {
	str, _ := text.MarshalList(0xeba5cc6f7f0c9fe8, s.List)
	return str
}

// FullMapReq_Promise is a wrapper for a FullMapReq promised by a client call.
type FullMapReq_Promise struct{ *capnp.Pipeline }

func (p FullMapReq_Promise) Struct() (FullMapReq, error) {
	s, err := p.Pipeline.Struct()
	return FullMapReq{s}, err
}

type FullMap struct{ capnp.Struct }

// FullMap_TypeID is the unique identifier for the type FullMap.
const FullMap_TypeID = 0xed4f7c2fa899f312

func NewFullMap(s *capnp.Segment) (FullMap, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return FullMap{st}, err
}

func NewRootFullMap(s *capnp.Segment) (FullMap, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return FullMap{st}, err
}

func ReadRootFullMap(msg *capnp.Message) (FullMap, error) {
	root, err := msg.RootPtr()
	return FullMap{root.Struct()}, err
}

func (s FullMap) String() string {
	str, _ := text.Marshal(0xed4f7c2fa899f312, s.Struct)
	return str
}

func (s FullMap) Id() uint8 {
	return s.Struct.Uint8(0)
}

func (s FullMap) SetId(v uint8) {
	s.Struct.SetUint8(0, v)
}

func (s FullMap) Ip() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s FullMap) HasIp() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s FullMap) IpBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s FullMap) SetIp(v string) error {
	return s.Struct.SetText(0, v)
}

func (s FullMap) Ia() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s FullMap) HasIa() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s FullMap) IaBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s FullMap) SetIa(v string) error {
	return s.Struct.SetText(1, v)
}

// FullMap_List is a list of FullMap.
type FullMap_List struct{ capnp.List }

// NewFullMap creates a new list of FullMap.
func NewFullMap_List(s *capnp.Segment, sz int32) (FullMap_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return FullMap_List{l}, err
}

func (s FullMap_List) At(i int) FullMap { return FullMap{s.List.Struct(i)} }

func (s FullMap_List) Set(i int, v FullMap) error { return s.List.SetStruct(i, v.Struct) }

func (s FullMap_List) String() string {
	str, _ := text.MarshalList(0xed4f7c2fa899f312, s.List)
	return str
}

// FullMap_Promise is a wrapper for a FullMap promised by a client call.
type FullMap_Promise struct{ *capnp.Pipeline }

func (p FullMap_Promise) Struct() (FullMap, error) {
	s, err := p.Pipeline.Struct()
	return FullMap{s}, err
}

type FullMapRep struct{ capnp.Struct }

// FullMapRep_TypeID is the unique identifier for the type FullMapRep.
const FullMapRep_TypeID = 0xa671b0286df5a992

func NewFullMapRep(s *capnp.Segment) (FullMapRep, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FullMapRep{st}, err
}

func NewRootFullMapRep(s *capnp.Segment) (FullMapRep, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FullMapRep{st}, err
}

func ReadRootFullMapRep(msg *capnp.Message) (FullMapRep, error) {
	root, err := msg.RootPtr()
	return FullMapRep{root.Struct()}, err
}

func (s FullMapRep) String() string {
	str, _ := text.Marshal(0xa671b0286df5a992, s.Struct)
	return str
}

func (s FullMapRep) Fm() (FullMap_List, error) {
	p, err := s.Struct.Ptr(0)
	return FullMap_List{List: p.List()}, err
}

func (s FullMapRep) HasFm() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s FullMapRep) SetFm(v FullMap_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewFm sets the fm field to a newly
// allocated FullMap_List, preferring placement in s's segment.
func (s FullMapRep) NewFm(n int32) (FullMap_List, error) {
	l, err := NewFullMap_List(s.Struct.Segment(), n)
	if err != nil {
		return FullMap_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// FullMapRep_List is a list of FullMapRep.
type FullMapRep_List struct{ capnp.List }

// NewFullMapRep creates a new list of FullMapRep.
func NewFullMapRep_List(s *capnp.Segment, sz int32) (FullMapRep_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return FullMapRep_List{l}, err
}

func (s FullMapRep_List) At(i int) FullMapRep { return FullMapRep{s.List.Struct(i)} }

func (s FullMapRep_List) Set(i int, v FullMapRep) error { return s.List.SetStruct(i, v.Struct) }

func (s FullMapRep_List) String() string {
	str, _ := text.MarshalList(0xa671b0286df5a992, s.List)
	return str
}

// FullMapRep_Promise is a wrapper for a FullMapRep promised by a client call.
type FullMapRep_Promise struct{ *capnp.Pipeline }

func (p FullMapRep_Promise) Struct() (FullMapRep, error) {
	s, err := p.Pipeline.Struct()
	return FullMapRep{s}, err
}

type SignedMSList struct{ capnp.Struct }

// SignedMSList_TypeID is the unique identifier for the type SignedMSList.
const SignedMSList_TypeID = 0x9cb550cb22608d73

func NewSignedMSList(s *capnp.Segment) (SignedMSList, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return SignedMSList{st}, err
}

func NewRootSignedMSList(s *capnp.Segment) (SignedMSList, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return SignedMSList{st}, err
}

func ReadRootSignedMSList(msg *capnp.Message) (SignedMSList, error) {
	root, err := msg.RootPtr()
	return SignedMSList{root.Struct()}, err
}

func (s SignedMSList) String() string {
	str, _ := text.Marshal(0x9cb550cb22608d73, s.Struct)
	return str
}

func (s SignedMSList) Timestamp() uint64 {
	return s.Struct.Uint64(0)
}

func (s SignedMSList) SetTimestamp(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s SignedMSList) AsEntries() (SignedEntry_List, error) {
	p, err := s.Struct.Ptr(0)
	return SignedEntry_List{List: p.List()}, err
}

func (s SignedMSList) HasAsEntries() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SignedMSList) SetAsEntries(v SignedEntry_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewAsEntries sets the asEntries field to a newly
// allocated SignedEntry_List, preferring placement in s's segment.
func (s SignedMSList) NewAsEntries(n int32) (SignedEntry_List, error) {
	l, err := NewSignedEntry_List(s.Struct.Segment(), n)
	if err != nil {
		return SignedEntry_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s SignedMSList) MsIA() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s SignedMSList) HasMsIA() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s SignedMSList) MsIABytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s SignedMSList) SetMsIA(v string) error {
	return s.Struct.SetText(1, v)
}

// SignedMSList_List is a list of SignedMSList.
type SignedMSList_List struct{ capnp.List }

// NewSignedMSList creates a new list of SignedMSList.
func NewSignedMSList_List(s *capnp.Segment, sz int32) (SignedMSList_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return SignedMSList_List{l}, err
}

func (s SignedMSList_List) At(i int) SignedMSList { return SignedMSList{s.List.Struct(i)} }

func (s SignedMSList_List) Set(i int, v SignedMSList) error { return s.List.SetStruct(i, v.Struct) }

func (s SignedMSList_List) String() string {
	str, _ := text.MarshalList(0x9cb550cb22608d73, s.List)
	return str
}

// SignedMSList_Promise is a wrapper for a SignedMSList promised by a client call.
type SignedMSList_Promise struct{ *capnp.Pipeline }

func (p SignedMSList_Promise) Struct() (SignedMSList, error) {
	s, err := p.Pipeline.Struct()
	return SignedMSList{s}, err
}

type SignedEntry struct{ capnp.Struct }

// SignedEntry_TypeID is the unique identifier for the type SignedEntry.
const SignedEntry_TypeID = 0xae7af16c750a8ece

func NewSignedEntry(s *capnp.Segment) (SignedEntry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SignedEntry{st}, err
}

func NewRootSignedEntry(s *capnp.Segment) (SignedEntry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SignedEntry{st}, err
}

func ReadRootSignedEntry(msg *capnp.Message) (SignedEntry, error) {
	root, err := msg.RootPtr()
	return SignedEntry{root.Struct()}, err
}

func (s SignedEntry) String() string {
	str, _ := text.Marshal(0xae7af16c750a8ece, s.Struct)
	return str
}

func (s SignedEntry) Blob() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s SignedEntry) HasBlob() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SignedEntry) SetBlob(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s SignedEntry) Sign() (Sign, error) {
	p, err := s.Struct.Ptr(1)
	return Sign{Struct: p.Struct()}, err
}

func (s SignedEntry) HasSign() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s SignedEntry) SetSign(v Sign) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewSign sets the sign field to a newly
// allocated Sign struct, preferring placement in s's segment.
func (s SignedEntry) NewSign() (Sign, error) {
	ss, err := NewSign(s.Struct.Segment())
	if err != nil {
		return Sign{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// SignedEntry_List is a list of SignedEntry.
type SignedEntry_List struct{ capnp.List }

// NewSignedEntry creates a new list of SignedEntry.
func NewSignedEntry_List(s *capnp.Segment, sz int32) (SignedEntry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return SignedEntry_List{l}, err
}

func (s SignedEntry_List) At(i int) SignedEntry { return SignedEntry{s.List.Struct(i)} }

func (s SignedEntry_List) Set(i int, v SignedEntry) error { return s.List.SetStruct(i, v.Struct) }

func (s SignedEntry_List) String() string {
	str, _ := text.MarshalList(0xae7af16c750a8ece, s.List)
	return str
}

// SignedEntry_Promise is a wrapper for a SignedEntry promised by a client call.
type SignedEntry_Promise struct{ *capnp.Pipeline }

func (p SignedEntry_Promise) Struct() (SignedEntry, error) {
	s, err := p.Pipeline.Struct()
	return SignedEntry{s}, err
}

func (p SignedEntry_Promise) Sign() Sign_Promise {
	return Sign_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

const schema_a1a908676d0a7d2e = "x\xda|\x93_h\x1cU\x14\xc6\xcfw\xcf\xccn\x12" +
	"2\xee\x8e\xb3/F%\xfe\xe9C\x15Z\x13\xff\xbcD" +
	"%]p\xa5\x81\x8c\xe6f+\x82\xf8\xd0I3\xad\xab" +
	"\xbb\x9bMf\x83\x8dD\xa4\x10A\x04\x15D\x90\x82\"" +
	"\x09(\xd6\x07-\xd2*B\x15\x1f\x14\x05[\xa9`A" +
	"\xa1\x05E\xc4J\xe9\x83Z_\xd4z\xe5\xcc\xee\xcc\x98" +
	"\xcd\xea\xdbp\xeew\xcf=\xdf\xef|3\xf6+v\xa9" +
	"q\xfb3E\xa4\xaf\xb3sf\xf7\xd3\xc7\x0e\x8e^X" +
	"{\x99\xf4 \x94\xd9\xf9\xe4P\xe3\xc0\xc0\x91u\xaa " +
	"\x9f\x83\xe5Ma\xce\xf3\x91'\xbam\x0a/\x80`\xa2" +
	"\xe7\xf6\xde\xf0\xc5\xcc\xf1WD\x8eLn\xab<\x91\xf7" +
	"\xa3z\xd7\xbb\x18\x7f\xfd\xac\xde!\x98\x17\x8f\xfc\xde\xd8" +
	"~t\xf1\x0dr\x07\xff\xad\x95~\xdea\xde\xf0\xd6Y" +
	"\xbe^\xe5I\x82\xf9\xf2\xf9\xa1\xe5\xfa/O\xbc\xdd\xa3" +
	"\x8d\xbb\x9d\xe2\xb7\xbc3\xb1\xf6+~\x9c`n<\xfb" +
	"\xd1\xfb\x93\x0f\xdc\xf9^\xef\x10\xb1d\x87\xb5\xe1\xdda" +
	"\xc9\xd7\xb8\xf5\x13\xc1\x9c\x7fm\xf8\xa9\x85\x93\xaf_\xe8" +
	"\x11\xc7\x8a\xab\xec\x0d\xefz[\xbe\xae\xb5e\x88+\x7f" +
	";\xfc\xe6-\xab\xf7_\xec\xeb\xeen\xfbY\xaf\x12\x8b" +
	"\xcb\xb6\xb8{p\xfdj\xbe\xfc\xc3\xe9K\xbd\xe2\xd8\xde" +
	"\xb7\xf6\x86\xf7},>g\xcb\xc8\x8dh\xe7\xbe\xa0\xd5" +
	"lQ~\xc2\xaf\xce\x00\xfa\x1a\xb6\x88,\x10\xb9\xc7G" +
	"\x88\xf4Q\x86>\xa1\xe0\xc0\x98\x12\xa4\xfa\xc1\xadD\xfa" +
	"\x18C\x7f\xac\xe0\xa8\xbfM\x09\x8a\xc8\xfdp\x8eH\x9f" +
	"`\xe8\xcf\x15\x1c\xbelJ`\"\xf7S\xa9~\xc2\xd0" +
	"\xa7\x15\x1c\xeb/S\x82E\xe4\x9ez\x88H\x9fd\xe8" +
	"o\x14\x1c\xfbOS\x82M\xe4\x9e\x91\xea\xd7\x0c\xfd\x9d" +
	"\x82\x93\xfb\xc3\x94\x90#r\xcf=J\xa4\xcf2\xf4y" +
	"\x05\xae\xcdc\x90\x14\x06\x09\xa3\xcb\xcd(lS\xce\x04" +
	"Qy_\xbb\xb6\xd0\xa4\xfcl\xb8\x88b\xb6\x01\x02\x8a" +
	"\x84M\xe7-\x1436\xdd\xf3\xfd\xcb\xf5\xba\x1f\xb4f" +
	"\x89\xe3\xeb\xe9N\xb6\x1e\xcb\xed47\xdd\xe3\xa8v\xa0" +
	"\x19\xce\xfbU*L\xd7\xa26\x8aY\x0a\xbb\x82\x84." +
	"&\xaa\x1d\xe9hU\x94\xc2y8\xe5\\\x99%\xd2\xf7" +
	"0\xf4\x8c\x02\xd0\xa1\xecKm\x9a\xa1\x1fQp\x15:" +
	"\x90\xc3\x9b\x89\xf4^\x86\xae+\x98v\xad\x11F\xed\xa0" +
	"Ah%TL\x10U\x9a\xed\xa5ZH\x88p\x05a" +
	"\x86\x81b\x16`\x82\x14\x0b\x8dh\xaa\x8caR\x18\xde" +
	"4\xe0\xbd\x1d\xab\xc2I\xc6\xb3\xd2\xf1\x1c\x89\xc1\x00C" +
	"oS\xe0\xfd\x8d\xacq\x1a\xcaN\xe3-f+\x85f" +
	"{iE\x9a\x0d\xa4\xcdn\x12\x0b\xdb\x18zL\xc1M" +
	"\xcc\xee\x90\xe2v\x86\xbe]\xa10W_\x98\x83C\x0a" +
	"\x0e\xa1 \x80Q4C\x87\xee\xbb4\xff\x92\xbf\xb6\x15" +
	"k\xb9\xea\x07\xadJ3\xdf}\xa8\x98>\x14\xc8\xd4\x0f" +
	"w\x01&\x0f\x85#]\x80\xab\x0aP\x1d\xa8+B\xfa" +
	" C\xaf)\xb8\xac:\xc1=4A\xa4W\x19\xfa\x19" +
	"\x89]\x90\xe0\xe2Z+\xb1/\x151\xddg\x0d\x93A" +
	"\x1c\xb9\xffe\xbc\xf8\x1f\x8cK\x9d\x98\xe7H!\xd7\xef" +
	"*QOv\xe4\xe2.\x86\x9e\xce\xb235\x92\xe5)" +
	"\xcd\x8e/\xc5\xdd\x0c\xbdg\xd3\x0b\xe2(5\x17\xf4\x19" +
	"\xd9\xaf\xce\x86\xad=\x0b\xf9\xc7\xc2f\xcf&\x97\xb2\xa5" +
	"%/\x8f\x0b\xcb1\x86\xbeK%?G\xb9J\xa3\x12" +
	"\xca\x95d\xa7\xfd\x88\xfd\x13\x00\x00\xff\xff_&`2"

func init() {
	schemas.Register(schema_a1a908676d0a7d2e,
		0x9784eb1f78b48548,
		0x9cb550cb22608d73,
		0xa671b0286df5a992,
		0xae7af16c750a8ece,
		0xb63b553fb7bedc23,
		0xeba5cc6f7f0c9fe8,
		0xed4f7c2fa899f312,
		0xf4d0e3fd031ba157)
}
