// Code generated by capnpc-go. DO NOT EDIT.

package proto

import (
	strconv "strconv"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type MS struct{ capnp.Struct }
type MS_Which uint16

const (
	MS_Which_unset       MS_Which = 0
	MS_Which_asActionReq MS_Which = 1
	MS_Which_asActionRep MS_Which = 2
)

func (w MS_Which) String() string {
	const s = "unsetasActionReqasActionRep"
	switch w {
	case MS_Which_unset:
		return s[0:5]
	case MS_Which_asActionReq:
		return s[5:16]
	case MS_Which_asActionRep:
		return s[16:27]

	}
	return "MS_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// MS_TypeID is the unique identifier for the type MS.
const MS_TypeID = 0xda155ff9f070267c

func NewMS(s *capnp.Segment) (MS, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return MS{st}, err
}

func NewRootMS(s *capnp.Segment) (MS, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return MS{st}, err
}

func ReadRootMS(msg *capnp.Message) (MS, error) {
	root, err := msg.RootPtr()
	return MS{root.Struct()}, err
}

func (s MS) String() string {
	str, _ := text.Marshal(0xda155ff9f070267c, s.Struct)
	return str
}

func (s MS) Which() MS_Which {
	return MS_Which(s.Struct.Uint16(8))
}
func (s MS) Id() uint64 {
	return s.Struct.Uint64(0)
}

func (s MS) SetId(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s MS) SetUnset() {
	s.Struct.SetUint16(8, 0)

}

func (s MS) AsActionReq() (ASMapEntry, error) {
	if s.Struct.Uint16(8) != 1 {
		panic("Which() != asActionReq")
	}
	p, err := s.Struct.Ptr(0)
	return ASMapEntry{Struct: p.Struct()}, err
}

func (s MS) HasAsActionReq() bool {
	if s.Struct.Uint16(8) != 1 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s MS) SetAsActionReq(v ASMapEntry) error {
	s.Struct.SetUint16(8, 1)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewAsActionReq sets the asActionReq field to a newly
// allocated ASMapEntry struct, preferring placement in s's segment.
func (s MS) NewAsActionReq() (ASMapEntry, error) {
	s.Struct.SetUint16(8, 1)
	ss, err := NewASMapEntry(s.Struct.Segment())
	if err != nil {
		return ASMapEntry{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s MS) AsActionRep() (MSRepToken, error) {
	if s.Struct.Uint16(8) != 2 {
		panic("Which() != asActionRep")
	}
	p, err := s.Struct.Ptr(0)
	return MSRepToken{Struct: p.Struct()}, err
}

func (s MS) HasAsActionRep() bool {
	if s.Struct.Uint16(8) != 2 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s MS) SetAsActionRep(v MSRepToken) error {
	s.Struct.SetUint16(8, 2)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewAsActionRep sets the asActionRep field to a newly
// allocated MSRepToken struct, preferring placement in s's segment.
func (s MS) NewAsActionRep() (MSRepToken, error) {
	s.Struct.SetUint16(8, 2)
	ss, err := NewMSRepToken(s.Struct.Segment())
	if err != nil {
		return MSRepToken{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// MS_List is a list of MS.
type MS_List struct{ capnp.List }

// NewMS creates a new list of MS.
func NewMS_List(s *capnp.Segment, sz int32) (MS_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return MS_List{l}, err
}

func (s MS_List) At(i int) MS { return MS{s.List.Struct(i)} }

func (s MS_List) Set(i int, v MS) error { return s.List.SetStruct(i, v.Struct) }

func (s MS_List) String() string {
	str, _ := text.MarshalList(0xda155ff9f070267c, s.List)
	return str
}

// MS_Promise is a wrapper for a MS promised by a client call.
type MS_Promise struct{ *capnp.Pipeline }

func (p MS_Promise) Struct() (MS, error) {
	s, err := p.Pipeline.Struct()
	return MS{s}, err
}

func (p MS_Promise) AsActionReq() ASMapEntry_Promise {
	return ASMapEntry_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p MS_Promise) AsActionRep() MSRepToken_Promise {
	return MSRepToken_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type ASMapEntry struct{ capnp.Struct }

// ASMapEntry_TypeID is the unique identifier for the type ASMapEntry.
const ASMapEntry_TypeID = 0xbf2197df52e713b4

func NewASMapEntry(s *capnp.Segment) (ASMapEntry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return ASMapEntry{st}, err
}

func NewRootASMapEntry(s *capnp.Segment) (ASMapEntry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return ASMapEntry{st}, err
}

func ReadRootASMapEntry(msg *capnp.Message) (ASMapEntry, error) {
	root, err := msg.RootPtr()
	return ASMapEntry{root.Struct()}, err
}

func (s ASMapEntry) String() string {
	str, _ := text.Marshal(0xbf2197df52e713b4, s.Struct)
	return str
}

func (s ASMapEntry) Ia() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s ASMapEntry) HasIa() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ASMapEntry) IaBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s ASMapEntry) SetIa(v string) error {
	return s.Struct.SetText(0, v)
}

func (s ASMapEntry) Ip() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(1)
	return capnp.TextList{List: p.List()}, err
}

func (s ASMapEntry) HasIp() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s ASMapEntry) SetIp(v capnp.TextList) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewIp sets the ip field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s ASMapEntry) NewIp(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s ASMapEntry) Timestamp() uint64 {
	return s.Struct.Uint64(0)
}

func (s ASMapEntry) SetTimestamp(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s ASMapEntry) Action() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s ASMapEntry) HasAction() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s ASMapEntry) ActionBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s ASMapEntry) SetAction(v string) error {
	return s.Struct.SetText(2, v)
}

// ASMapEntry_List is a list of ASMapEntry.
type ASMapEntry_List struct{ capnp.List }

// NewASMapEntry creates a new list of ASMapEntry.
func NewASMapEntry_List(s *capnp.Segment, sz int32) (ASMapEntry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return ASMapEntry_List{l}, err
}

func (s ASMapEntry_List) At(i int) ASMapEntry { return ASMapEntry{s.List.Struct(i)} }

func (s ASMapEntry_List) Set(i int, v ASMapEntry) error { return s.List.SetStruct(i, v.Struct) }

func (s ASMapEntry_List) String() string {
	str, _ := text.MarshalList(0xbf2197df52e713b4, s.List)
	return str
}

// ASMapEntry_Promise is a wrapper for a ASMapEntry promised by a client call.
type ASMapEntry_Promise struct{ *capnp.Pipeline }

func (p ASMapEntry_Promise) Struct() (ASMapEntry, error) {
	s, err := p.Pipeline.Struct()
	return ASMapEntry{s}, err
}

type MSRepToken struct{ capnp.Struct }

// MSRepToken_TypeID is the unique identifier for the type MSRepToken.
const MSRepToken_TypeID = 0xd7387a16c86c1020

func NewMSRepToken(s *capnp.Segment) (MSRepToken, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return MSRepToken{st}, err
}

func NewRootMSRepToken(s *capnp.Segment) (MSRepToken, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return MSRepToken{st}, err
}

func ReadRootMSRepToken(msg *capnp.Message) (MSRepToken, error) {
	root, err := msg.RootPtr()
	return MSRepToken{root.Struct()}, err
}

func (s MSRepToken) String() string {
	str, _ := text.Marshal(0xd7387a16c86c1020, s.Struct)
	return str
}

func (s MSRepToken) SignedASEntry() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s MSRepToken) HasSignedASEntry() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s MSRepToken) SetSignedASEntry(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s MSRepToken) Timestamp() uint64 {
	return s.Struct.Uint64(0)
}

func (s MSRepToken) SetTimestamp(v uint64) {
	s.Struct.SetUint64(0, v)
}

// MSRepToken_List is a list of MSRepToken.
type MSRepToken_List struct{ capnp.List }

// NewMSRepToken creates a new list of MSRepToken.
func NewMSRepToken_List(s *capnp.Segment, sz int32) (MSRepToken_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return MSRepToken_List{l}, err
}

func (s MSRepToken_List) At(i int) MSRepToken { return MSRepToken{s.List.Struct(i)} }

func (s MSRepToken_List) Set(i int, v MSRepToken) error { return s.List.SetStruct(i, v.Struct) }

func (s MSRepToken_List) String() string {
	str, _ := text.MarshalList(0xd7387a16c86c1020, s.List)
	return str
}

// MSRepToken_Promise is a wrapper for a MSRepToken promised by a client call.
type MSRepToken_Promise struct{ *capnp.Pipeline }

func (p MSRepToken_Promise) Struct() (MSRepToken, error) {
	s, err := p.Pipeline.Struct()
	return MSRepToken{s}, err
}

const schema_de42b02816bdc1bf = "x\xdat\x921\x8b\x13Q\x14\x85\xcf\xb97\xd91\x90" +
	"Yg\x98\xb8\x85\xcdj#k#\xaeXH\x104B" +
	"\xca\xc0\xbe\xc4FPtvwp\x077\xb3/\x99Y" +
	"4\x92F\xb0\xf0\x1f\xd8\xef/\xb0\xb0\x95%\x85`m" +
	"#Xh\xb9\xad\xad\x85>\x99d\x93\xa8h5\xc3\xb9" +
	"\xe7\xbds\xde\xc7\x0d>\xde\x96\xcd\xeaY\x02\xa6^]" +
	"qo\xa3\x93\xee\xd7\xd7\x17\x8faj\xa4;\x9e\xbc[" +
	"\xdbxs\xe7\x0b\xaa\xea\x01a\xff(<,\xbf\x83\x13" +
	"\xd0]\x08\xf6?\xac=\xbf\xf1\xe9o'= \xba\xc7" +
	"\xa3(\x9e\xfe=\xe0S\xd0\x8d/\xd9o\xdf\x1f\x9e\xfb" +
	"\\\x9aein\xd3SV\xa2\x09\xb7\xa3\xf7S\xf7\x84" +
	"\xe5\xd5\xfd\xfc\xcaNl3\xcbf\xab\xd7\x89m;\xf3" +
	"\x8a\xe1h\x8b4\x81V\x80\x0a\x810>\x0f\x98\xfbJ" +
	"\xb3'\x0c\xc9\x06K1)\xc5GJ3\x16R\x1a\x14" +
	" \x1cu\x01\xf3Li^\x0aC\x95\x06\x15\x08_4" +
	"\x013V\x9aWBMc\xd6!\xac\x83\x9aZ\xae\x82" +
	"[\xca\xa9\xb2\x0a\xba\"\xed'y\x11\xf7A\xcb\x1a\x84" +
	"5\xf0V\xbcS\xa4\x07\xd9\xfc\xd0om;\xbdnb" +
	"\xef\x1exO\x92\xacl{f\xd1\xf6\xf2\x100\x1bJ" +
	"s]8/\xbbY\x16\xbb\xaa47\x85.O\x1fg" +
	"\xc9n\xab\x87\xf5vV\x0cG\xf4!\xf4\xff\x1d\xbf\xc8" +
	"\x83\xd7\xec\xf4\xfeO\xc5\xa7s\xa7X\xae\x9db\xd9\x17" +
	"\xfa\xf2\xd3\xcd\xc0\xa4\xdb\x80\xd9S\x9aB\xe8\xeb\x0f7" +
	"#3(U;C\xa8\xe9\xee<t\xfd0\xcb\x93\x02" +
	"+.\xce[\xd3\xd7\xc3\xeb&\x03\x06\xcb}\x01\x19\x80" +
	"\x7f\xcc-\x83\xe5\x96\xcc\xe6\xbf\x02\x00\x00\xff\xff,\x84" +
	"\x8b\xeb"

func init() {
	schemas.Register(schema_de42b02816bdc1bf,
		0xbf2197df52e713b4,
		0xd7387a16c86c1020,
		0xda155ff9f070267c)
}
