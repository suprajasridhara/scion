// Code generated by capnpc-go. DO NOT EDIT.

package proto

import (
	strconv "strconv"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type PGN struct{ capnp.Struct }
type PGN_Which uint16

const (
	PGN_Which_unset              PGN_Which = 0
	PGN_Which_addPLNEntryRequest PGN_Which = 1
	PGN_Which_addPGNEntryRequest PGN_Which = 2
	PGN_Which_pgnRep             PGN_Which = 3
	PGN_Which_pgnList            PGN_Which = 4
	PGN_Which_pgnEntryRequest    PGN_Which = 5
)

func (w PGN_Which) String() string {
	const s = "unsetaddPLNEntryRequestaddPGNEntryRequestpgnReppgnListpgnEntryRequest"
	switch w {
	case PGN_Which_unset:
		return s[0:5]
	case PGN_Which_addPLNEntryRequest:
		return s[5:23]
	case PGN_Which_addPGNEntryRequest:
		return s[23:41]
	case PGN_Which_pgnRep:
		return s[41:47]
	case PGN_Which_pgnList:
		return s[47:54]
	case PGN_Which_pgnEntryRequest:
		return s[54:69]

	}
	return "PGN_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// PGN_TypeID is the unique identifier for the type PGN.
const PGN_TypeID = 0xa75b211d8d485722

func NewPGN(s *capnp.Segment) (PGN, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return PGN{st}, err
}

func NewRootPGN(s *capnp.Segment) (PGN, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return PGN{st}, err
}

func ReadRootPGN(msg *capnp.Message) (PGN, error) {
	root, err := msg.RootPtr()
	return PGN{root.Struct()}, err
}

func (s PGN) String() string {
	str, _ := text.Marshal(0xa75b211d8d485722, s.Struct)
	return str
}

func (s PGN) Which() PGN_Which {
	return PGN_Which(s.Struct.Uint16(8))
}
func (s PGN) Id() uint64 {
	return s.Struct.Uint64(0)
}

func (s PGN) SetId(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s PGN) SetUnset() {
	s.Struct.SetUint16(8, 0)

}

func (s PGN) AddPLNEntryRequest() (AddPLNEntryRequest, error) {
	if s.Struct.Uint16(8) != 1 {
		panic("Which() != addPLNEntryRequest")
	}
	p, err := s.Struct.Ptr(0)
	return AddPLNEntryRequest{Struct: p.Struct()}, err
}

func (s PGN) HasAddPLNEntryRequest() bool {
	if s.Struct.Uint16(8) != 1 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PGN) SetAddPLNEntryRequest(v AddPLNEntryRequest) error {
	s.Struct.SetUint16(8, 1)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewAddPLNEntryRequest sets the addPLNEntryRequest field to a newly
// allocated AddPLNEntryRequest struct, preferring placement in s's segment.
func (s PGN) NewAddPLNEntryRequest() (AddPLNEntryRequest, error) {
	s.Struct.SetUint16(8, 1)
	ss, err := NewAddPLNEntryRequest(s.Struct.Segment())
	if err != nil {
		return AddPLNEntryRequest{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s PGN) AddPGNEntryRequest() (PGNEntry, error) {
	if s.Struct.Uint16(8) != 2 {
		panic("Which() != addPGNEntryRequest")
	}
	p, err := s.Struct.Ptr(0)
	return PGNEntry{Struct: p.Struct()}, err
}

func (s PGN) HasAddPGNEntryRequest() bool {
	if s.Struct.Uint16(8) != 2 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PGN) SetAddPGNEntryRequest(v PGNEntry) error {
	s.Struct.SetUint16(8, 2)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewAddPGNEntryRequest sets the addPGNEntryRequest field to a newly
// allocated PGNEntry struct, preferring placement in s's segment.
func (s PGN) NewAddPGNEntryRequest() (PGNEntry, error) {
	s.Struct.SetUint16(8, 2)
	ss, err := NewPGNEntry(s.Struct.Segment())
	if err != nil {
		return PGNEntry{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s PGN) PgnRep() (PGNRep, error) {
	if s.Struct.Uint16(8) != 3 {
		panic("Which() != pgnRep")
	}
	p, err := s.Struct.Ptr(0)
	return PGNRep{Struct: p.Struct()}, err
}

func (s PGN) HasPgnRep() bool {
	if s.Struct.Uint16(8) != 3 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PGN) SetPgnRep(v PGNRep) error {
	s.Struct.SetUint16(8, 3)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewPgnRep sets the pgnRep field to a newly
// allocated PGNRep struct, preferring placement in s's segment.
func (s PGN) NewPgnRep() (PGNRep, error) {
	s.Struct.SetUint16(8, 3)
	ss, err := NewPGNRep(s.Struct.Segment())
	if err != nil {
		return PGNRep{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s PGN) PgnList() (PGNList, error) {
	if s.Struct.Uint16(8) != 4 {
		panic("Which() != pgnList")
	}
	p, err := s.Struct.Ptr(0)
	return PGNList{Struct: p.Struct()}, err
}

func (s PGN) HasPgnList() bool {
	if s.Struct.Uint16(8) != 4 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PGN) SetPgnList(v PGNList) error {
	s.Struct.SetUint16(8, 4)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewPgnList sets the pgnList field to a newly
// allocated PGNList struct, preferring placement in s's segment.
func (s PGN) NewPgnList() (PGNList, error) {
	s.Struct.SetUint16(8, 4)
	ss, err := NewPGNList(s.Struct.Segment())
	if err != nil {
		return PGNList{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s PGN) PgnEntryRequest() (PGNEntryRequest, error) {
	if s.Struct.Uint16(8) != 5 {
		panic("Which() != pgnEntryRequest")
	}
	p, err := s.Struct.Ptr(0)
	return PGNEntryRequest{Struct: p.Struct()}, err
}

func (s PGN) HasPgnEntryRequest() bool {
	if s.Struct.Uint16(8) != 5 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PGN) SetPgnEntryRequest(v PGNEntryRequest) error {
	s.Struct.SetUint16(8, 5)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewPgnEntryRequest sets the pgnEntryRequest field to a newly
// allocated PGNEntryRequest struct, preferring placement in s's segment.
func (s PGN) NewPgnEntryRequest() (PGNEntryRequest, error) {
	s.Struct.SetUint16(8, 5)
	ss, err := NewPGNEntryRequest(s.Struct.Segment())
	if err != nil {
		return PGNEntryRequest{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// PGN_List is a list of PGN.
type PGN_List struct{ capnp.List }

// NewPGN creates a new list of PGN.
func NewPGN_List(s *capnp.Segment, sz int32) (PGN_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return PGN_List{l}, err
}

func (s PGN_List) At(i int) PGN { return PGN{s.List.Struct(i)} }

func (s PGN_List) Set(i int, v PGN) error { return s.List.SetStruct(i, v.Struct) }

func (s PGN_List) String() string {
	str, _ := text.MarshalList(0xa75b211d8d485722, s.List)
	return str
}

// PGN_Promise is a wrapper for a PGN promised by a client call.
type PGN_Promise struct{ *capnp.Pipeline }

func (p PGN_Promise) Struct() (PGN, error) {
	s, err := p.Pipeline.Struct()
	return PGN{s}, err
}

func (p PGN_Promise) AddPLNEntryRequest() AddPLNEntryRequest_Promise {
	return AddPLNEntryRequest_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p PGN_Promise) AddPGNEntryRequest() PGNEntry_Promise {
	return PGNEntry_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p PGN_Promise) PgnRep() PGNRep_Promise {
	return PGNRep_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p PGN_Promise) PgnList() PGNList_Promise {
	return PGNList_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p PGN_Promise) PgnEntryRequest() PGNEntryRequest_Promise {
	return PGNEntryRequest_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type AddPLNEntryRequest struct{ capnp.Struct }

// AddPLNEntryRequest_TypeID is the unique identifier for the type AddPLNEntryRequest.
const AddPLNEntryRequest_TypeID = 0xd174b993a12ebc4d

func NewAddPLNEntryRequest(s *capnp.Segment) (AddPLNEntryRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AddPLNEntryRequest{st}, err
}

func NewRootAddPLNEntryRequest(s *capnp.Segment) (AddPLNEntryRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AddPLNEntryRequest{st}, err
}

func ReadRootAddPLNEntryRequest(msg *capnp.Message) (AddPLNEntryRequest, error) {
	root, err := msg.RootPtr()
	return AddPLNEntryRequest{root.Struct()}, err
}

func (s AddPLNEntryRequest) String() string {
	str, _ := text.Marshal(0xd174b993a12ebc4d, s.Struct)
	return str
}

func (s AddPLNEntryRequest) Entry() (PlnListEntry, error) {
	p, err := s.Struct.Ptr(0)
	return PlnListEntry{Struct: p.Struct()}, err
}

func (s AddPLNEntryRequest) HasEntry() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s AddPLNEntryRequest) SetEntry(v PlnListEntry) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewEntry sets the entry field to a newly
// allocated PlnListEntry struct, preferring placement in s's segment.
func (s AddPLNEntryRequest) NewEntry() (PlnListEntry, error) {
	ss, err := NewPlnListEntry(s.Struct.Segment())
	if err != nil {
		return PlnListEntry{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// AddPLNEntryRequest_List is a list of AddPLNEntryRequest.
type AddPLNEntryRequest_List struct{ capnp.List }

// NewAddPLNEntryRequest creates a new list of AddPLNEntryRequest.
func NewAddPLNEntryRequest_List(s *capnp.Segment, sz int32) (AddPLNEntryRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return AddPLNEntryRequest_List{l}, err
}

func (s AddPLNEntryRequest_List) At(i int) AddPLNEntryRequest {
	return AddPLNEntryRequest{s.List.Struct(i)}
}

func (s AddPLNEntryRequest_List) Set(i int, v AddPLNEntryRequest) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s AddPLNEntryRequest_List) String() string {
	str, _ := text.MarshalList(0xd174b993a12ebc4d, s.List)
	return str
}

// AddPLNEntryRequest_Promise is a wrapper for a AddPLNEntryRequest promised by a client call.
type AddPLNEntryRequest_Promise struct{ *capnp.Pipeline }

func (p AddPLNEntryRequest_Promise) Struct() (AddPLNEntryRequest, error) {
	s, err := p.Pipeline.Struct()
	return AddPLNEntryRequest{s}, err
}

func (p AddPLNEntryRequest_Promise) Entry() PlnListEntry_Promise {
	return PlnListEntry_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type PGNList struct{ capnp.Struct }

// PGNList_TypeID is the unique identifier for the type PGNList.
const PGNList_TypeID = 0xd8cf9ec0e76eae18

func NewPGNList(s *capnp.Segment) (PGNList, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return PGNList{st}, err
}

func NewRootPGNList(s *capnp.Segment) (PGNList, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return PGNList{st}, err
}

func ReadRootPGNList(msg *capnp.Message) (PGNList, error) {
	root, err := msg.RootPtr()
	return PGNList{root.Struct()}, err
}

func (s PGNList) String() string {
	str, _ := text.Marshal(0xd8cf9ec0e76eae18, s.Struct)
	return str
}

func (s PGNList) L() (capnp.DataList, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.DataList{List: p.List()}, err
}

func (s PGNList) HasL() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PGNList) SetL(v capnp.DataList) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewL sets the l field to a newly
// allocated capnp.DataList, preferring placement in s's segment.
func (s PGNList) NewL(n int32) (capnp.DataList, error) {
	l, err := capnp.NewDataList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.DataList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s PGNList) EmptyObjects() (capnp.DataList, error) {
	p, err := s.Struct.Ptr(1)
	return capnp.DataList{List: p.List()}, err
}

func (s PGNList) HasEmptyObjects() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s PGNList) SetEmptyObjects(v capnp.DataList) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewEmptyObjects sets the emptyObjects field to a newly
// allocated capnp.DataList, preferring placement in s's segment.
func (s PGNList) NewEmptyObjects(n int32) (capnp.DataList, error) {
	l, err := capnp.NewDataList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.DataList{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s PGNList) Timestamp() uint64 {
	return s.Struct.Uint64(0)
}

func (s PGNList) SetTimestamp(v uint64) {
	s.Struct.SetUint64(0, v)
}

// PGNList_List is a list of PGNList.
type PGNList_List struct{ capnp.List }

// NewPGNList creates a new list of PGNList.
func NewPGNList_List(s *capnp.Segment, sz int32) (PGNList_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return PGNList_List{l}, err
}

func (s PGNList_List) At(i int) PGNList { return PGNList{s.List.Struct(i)} }

func (s PGNList_List) Set(i int, v PGNList) error { return s.List.SetStruct(i, v.Struct) }

func (s PGNList_List) String() string {
	str, _ := text.MarshalList(0xd8cf9ec0e76eae18, s.List)
	return str
}

// PGNList_Promise is a wrapper for a PGNList promised by a client call.
type PGNList_Promise struct{ *capnp.Pipeline }

func (p PGNList_Promise) Struct() (PGNList, error) {
	s, err := p.Pipeline.Struct()
	return PGNList{s}, err
}

type PGNEntry struct{ capnp.Struct }

// PGNEntry_TypeID is the unique identifier for the type PGNEntry.
const PGNEntry_TypeID = 0xee3edfe035cdf0b9

func NewPGNEntry(s *capnp.Segment) (PGNEntry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 5})
	return PGNEntry{st}, err
}

func NewRootPGNEntry(s *capnp.Segment) (PGNEntry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 5})
	return PGNEntry{st}, err
}

func ReadRootPGNEntry(msg *capnp.Message) (PGNEntry, error) {
	root, err := msg.RootPtr()
	return PGNEntry{root.Struct()}, err
}

func (s PGNEntry) String() string {
	str, _ := text.Marshal(0xee3edfe035cdf0b9, s.Struct)
	return str
}

func (s PGNEntry) Entry() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s PGNEntry) HasEntry() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PGNEntry) SetEntry(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s PGNEntry) EntryType() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s PGNEntry) HasEntryType() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s PGNEntry) EntryTypeBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s PGNEntry) SetEntryType(v string) error {
	return s.Struct.SetText(1, v)
}

func (s PGNEntry) CommitID() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s PGNEntry) HasCommitID() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s PGNEntry) CommitIDBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s PGNEntry) SetCommitID(v string) error {
	return s.Struct.SetText(2, v)
}

func (s PGNEntry) PgnId() (string, error) {
	p, err := s.Struct.Ptr(3)
	return p.Text(), err
}

func (s PGNEntry) HasPgnId() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s PGNEntry) PgnIdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return p.TextBytes(), err
}

func (s PGNEntry) SetPgnId(v string) error {
	return s.Struct.SetText(3, v)
}

func (s PGNEntry) Timestamp() uint64 {
	return s.Struct.Uint64(0)
}

func (s PGNEntry) SetTimestamp(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s PGNEntry) SrcIA() (string, error) {
	p, err := s.Struct.Ptr(4)
	return p.Text(), err
}

func (s PGNEntry) HasSrcIA() bool {
	p, err := s.Struct.Ptr(4)
	return p.IsValid() || err != nil
}

func (s PGNEntry) SrcIABytes() ([]byte, error) {
	p, err := s.Struct.Ptr(4)
	return p.TextBytes(), err
}

func (s PGNEntry) SetSrcIA(v string) error {
	return s.Struct.SetText(4, v)
}

// PGNEntry_List is a list of PGNEntry.
type PGNEntry_List struct{ capnp.List }

// NewPGNEntry creates a new list of PGNEntry.
func NewPGNEntry_List(s *capnp.Segment, sz int32) (PGNEntry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 5}, sz)
	return PGNEntry_List{l}, err
}

func (s PGNEntry_List) At(i int) PGNEntry { return PGNEntry{s.List.Struct(i)} }

func (s PGNEntry_List) Set(i int, v PGNEntry) error { return s.List.SetStruct(i, v.Struct) }

func (s PGNEntry_List) String() string {
	str, _ := text.MarshalList(0xee3edfe035cdf0b9, s.List)
	return str
}

// PGNEntry_Promise is a wrapper for a PGNEntry promised by a client call.
type PGNEntry_Promise struct{ *capnp.Pipeline }

func (p PGNEntry_Promise) Struct() (PGNEntry, error) {
	s, err := p.Pipeline.Struct()
	return PGNEntry{s}, err
}

type PGNRep struct{ capnp.Struct }

// PGNRep_TypeID is the unique identifier for the type PGNRep.
const PGNRep_TypeID = 0xd8fc85bcc29cc75e

func NewPGNRep(s *capnp.Segment) (PGNRep, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PGNRep{st}, err
}

func NewRootPGNRep(s *capnp.Segment) (PGNRep, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PGNRep{st}, err
}

func ReadRootPGNRep(msg *capnp.Message) (PGNRep, error) {
	root, err := msg.RootPtr()
	return PGNRep{root.Struct()}, err
}

func (s PGNRep) String() string {
	str, _ := text.Marshal(0xd8fc85bcc29cc75e, s.Struct)
	return str
}

func (s PGNRep) Entry() (PGNEntry, error) {
	p, err := s.Struct.Ptr(0)
	return PGNEntry{Struct: p.Struct()}, err
}

func (s PGNRep) HasEntry() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PGNRep) SetEntry(v PGNEntry) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewEntry sets the entry field to a newly
// allocated PGNEntry struct, preferring placement in s's segment.
func (s PGNRep) NewEntry() (PGNEntry, error) {
	ss, err := NewPGNEntry(s.Struct.Segment())
	if err != nil {
		return PGNEntry{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s PGNRep) Timestamp() uint64 {
	return s.Struct.Uint64(0)
}

func (s PGNRep) SetTimestamp(v uint64) {
	s.Struct.SetUint64(0, v)
}

// PGNRep_List is a list of PGNRep.
type PGNRep_List struct{ capnp.List }

// NewPGNRep creates a new list of PGNRep.
func NewPGNRep_List(s *capnp.Segment, sz int32) (PGNRep_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return PGNRep_List{l}, err
}

func (s PGNRep_List) At(i int) PGNRep { return PGNRep{s.List.Struct(i)} }

func (s PGNRep_List) Set(i int, v PGNRep) error { return s.List.SetStruct(i, v.Struct) }

func (s PGNRep_List) String() string {
	str, _ := text.MarshalList(0xd8fc85bcc29cc75e, s.List)
	return str
}

// PGNRep_Promise is a wrapper for a PGNRep promised by a client call.
type PGNRep_Promise struct{ *capnp.Pipeline }

func (p PGNRep_Promise) Struct() (PGNRep, error) {
	s, err := p.Pipeline.Struct()
	return PGNRep{s}, err
}

func (p PGNRep_Promise) Entry() PGNEntry_Promise {
	return PGNEntry_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type PGNEntryRequest struct{ capnp.Struct }

// PGNEntryRequest_TypeID is the unique identifier for the type PGNEntryRequest.
const PGNEntryRequest_TypeID = 0x8c6e22c459318546

func NewPGNEntryRequest(s *capnp.Segment) (PGNEntryRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return PGNEntryRequest{st}, err
}

func NewRootPGNEntryRequest(s *capnp.Segment) (PGNEntryRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return PGNEntryRequest{st}, err
}

func ReadRootPGNEntryRequest(msg *capnp.Message) (PGNEntryRequest, error) {
	root, err := msg.RootPtr()
	return PGNEntryRequest{root.Struct()}, err
}

func (s PGNEntryRequest) String() string {
	str, _ := text.Marshal(0x8c6e22c459318546, s.Struct)
	return str
}

func (s PGNEntryRequest) EntryType() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s PGNEntryRequest) HasEntryType() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PGNEntryRequest) EntryTypeBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s PGNEntryRequest) SetEntryType(v string) error {
	return s.Struct.SetText(0, v)
}

func (s PGNEntryRequest) SrcIA() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s PGNEntryRequest) HasSrcIA() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s PGNEntryRequest) SrcIABytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s PGNEntryRequest) SetSrcIA(v string) error {
	return s.Struct.SetText(1, v)
}

// PGNEntryRequest_List is a list of PGNEntryRequest.
type PGNEntryRequest_List struct{ capnp.List }

// NewPGNEntryRequest creates a new list of PGNEntryRequest.
func NewPGNEntryRequest_List(s *capnp.Segment, sz int32) (PGNEntryRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return PGNEntryRequest_List{l}, err
}

func (s PGNEntryRequest_List) At(i int) PGNEntryRequest { return PGNEntryRequest{s.List.Struct(i)} }

func (s PGNEntryRequest_List) Set(i int, v PGNEntryRequest) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s PGNEntryRequest_List) String() string {
	str, _ := text.MarshalList(0x8c6e22c459318546, s.List)
	return str
}

// PGNEntryRequest_Promise is a wrapper for a PGNEntryRequest promised by a client call.
type PGNEntryRequest_Promise struct{ *capnp.Pipeline }

func (p PGNEntryRequest_Promise) Struct() (PGNEntryRequest, error) {
	s, err := p.Pipeline.Struct()
	return PGNEntryRequest{s}, err
}

const schema_de42b02816b2b3bf = "x\xda\x8cS]\x88\x1be\x14=\xe7\xbb\x93l[v" +
	"l\xc6\x09\xba\x88eiQ\xa8\xa0\xa5[\x15\xa4\xa0\xfd" +
	"\xc1X#\xdb6_\x10\xda\xe0\x0f\xac\xc9\x10R\xcc8" +
	"M\xa6J@\x10\x84\xbe\x88\"X_,U\x14\x14\xfb" +
	"\xa2\xae\xba>,\xac\xb8\x88 B\xc5\x1f\x14V\xa8Z" +
	"\x1f\xc4\x9f\x07Q\xc1\x07\xb5\xeb'\xdfL2Y\xa7\xfb" +
	"\xe0S&3\xe7\xdes\xee=\xe7\xee\\\xe0^5S" +
	"\xb8R\x01z\xaaP4w\x9c\x9ci|\xb0-|\x12" +
	"\xde&\x9a\xf7\xde~\xeb\x8a\xed\xf3\xfb\xbfAAM\x00" +
	"\xdeo\x9f{\xab\xf6\xf7\xcfG@\xb3\xed\xc8\x9dOm" +
	"\xd9z\xcf\xab\xd0\x9b\xa8\xc6\xc8\x0a'\x8at\xfc\x06{" +
	"\xfe}\x9c\x00nl\xf0i\x82\xe6\xe0\xd2\x8e\x97N-" +
	"\xc6\x9f\xe5\xfaZ\x88\xff\x87\xfa\xd9\xa7\xd8\xa7U\xb5\x07" +
	"4S\xaf\x87?,\xbf\xf0\xc9\x8am\x9d\x17\xe1o\x91" +
	"g\xfck\x13\xf0Vy\x034\xf7\x7fx\xe6\xfd\xa5\x93" +
	"\x17/\x01'\x9d\xbf\x93'\xfc\x9f\x12\xf0\xf7bE/" +
	"\xfe\xfa\xf1\xcd\x17\xbe\xbd\xed\x97<\xb8`!\x15\xe7\xb4" +
	"\x7f\xd0\xb1\x9a\xab\xce\x11\xab9j\x87;\x9asQ\xa8" +
	"\xa2\xdd\xb5\x03\x87*a\xdc\x1b\xd4\x83\xe3'\x82>\xe3" +
	"\x1a\xa97\x88\x038\x04\xbc\xeb\xea\x80\xde.\xd47)" +
	"zd\x99\xf6\xe5\xcc.@_/\xd4\xb7(\x9a\xc0\x16" +
	"\xdf=\x88\xc0\x80\x93P\x9c\x04\xa7\xfb\xbdfu\xdf\xe8" +
	"_F\x86\xe9\x84\xcd\x12\\\x9d\x11\xbcs\x15\xa0\xe7\x85" +
	"zI\xd1\xa51)\xc3\xa2eX\x10\xeaeEW\xfd" +
	"c\xcaT\x80\xf7\xeei@/\x0b\xf59EWVM" +
	"\x99\x02x\x1f\xd9\xb7\xe7\x84zE\xd1u.\x9a2\x1d" +
	"\xc0\xfbr7\xa0?\x15\xea\xf3\x8an\xe1oSf\x01" +
	"\xf0\xbe\xda\x0f\xe8/\x84\xfa\x82\xa2[\xfc\xcb\x94Y\x04" +
	"\xbc\xaf\x1f\x07\xf4y\xa1\xfeQQ:-n\x84\xe2F" +
	"p\xfaD\xd8\x0fb\x14\xcd\\\xabU\x9b=T\x099" +
	"Z\x93\xf4c\x96\xc6\xc6\x83,\x81\x09\xec\xc0\xa5\xb0\xcc" +
	"\x99\x14\xb6'j\x87\xf5 bi\xeco\xfa\xe1\xb1\xa8" +
	"\x1d\xcev\x92\x92,&\xc3\xceQ;L<bjR" +
	"\x0c\x96\xc6q\x1ecF\x96\xee\x1b\xeaMul\xb6\x15" +
	"v\xe9N\xb6t\xd7\xaew\x83P\x97\x15\xa7\x13\x03Y" +
	"2\xbb~\xbf\xf5\xf0\xd1\x87O\xad\xe4\x1b2qm\xb6" +
	"3\xcc\xc6d\xd6\xa5r9\xa0\xf7\x0a\xf5\xbdk\xb2\xd1" +
	"8\x06\xe8\xa3B\x1d+R\xa5\xbe\x1d\xb7!\x8a\x84\xfa" +
	"QE>\xc8\xcb\xc0\x9a\x90.\x94}4A7\x8a\x07" +
	"\x87\x1f8\x86\xcdA3\xee\xe7\xbf\xc6\x9dn\xd0\x8f\xe7" +
	"\xba`4\xf2%\xa7\xac\x1eD@.\xb5v\xbek\x84" +
	"z\xa7\xe2H\xd8\x0d\xf5qh\xb3\x99s\xde\xfc\x0f\xb6" +
	"J\x18Ko`\xe9\xa62\xba\xe7,\xdd\xb3B\xfd\xe2" +
	"\x9aE<o\xf9\xce\x08\xf5YEO\x0d7\xf1\xca]" +
	"\x80~Y\xa8\xe7\x15=\x914\xc0\xaf\xd9\xf2\xb3B\xbd" +
	"\xa0H'\x8d\xef\x9b\xf5\xf1Yx\x05'M\xef\xda\xab" +
	"\x18\x8e`\xd7\xe4b\xdd+4\xcd\x87\xba\xddN\\\xbd" +
	"\x1d@v\x99Q;\xac\xb62\xc4:\xe3\xfe\xf7v\xff" +
	"\x0d\x00\x00\xff\xff\xde\xd5N+"

func init() {
	schemas.Register(schema_de42b02816b2b3bf,
		0x8c6e22c459318546,
		0xa75b211d8d485722,
		0xd174b993a12ebc4d,
		0xd8cf9ec0e76eae18,
		0xd8fc85bcc29cc75e,
		0xee3edfe035cdf0b9)
}
