// Code generated by capnpc-go. DO NOT EDIT.

package proto

import (
	strconv "strconv"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type PGN struct{ capnp.Struct }
type PGN_Which uint16

const (
	PGN_Which_unset              PGN_Which = 0
	PGN_Which_addPLNEntryRequest PGN_Which = 1
	PGN_Which_addPGNEntryRequest PGN_Which = 2
	PGN_Which_pgnRep             PGN_Which = 3
	PGN_Which_pgnList            PGN_Which = 4
	PGN_Which_pgnEntryRequest    PGN_Which = 5
	PGN_Which_emptyObject        PGN_Which = 6
)

func (w PGN_Which) String() string {
	const s = "unsetaddPLNEntryRequestaddPGNEntryRequestpgnReppgnListpgnEntryRequestemptyObject"
	switch w {
	case PGN_Which_unset:
		return s[0:5]
	case PGN_Which_addPLNEntryRequest:
		return s[5:23]
	case PGN_Which_addPGNEntryRequest:
		return s[23:41]
	case PGN_Which_pgnRep:
		return s[41:47]
	case PGN_Which_pgnList:
		return s[47:54]
	case PGN_Which_pgnEntryRequest:
		return s[54:69]
	case PGN_Which_emptyObject:
		return s[69:80]

	}
	return "PGN_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// PGN_TypeID is the unique identifier for the type PGN.
const PGN_TypeID = 0xa75b211d8d485722

func NewPGN(s *capnp.Segment) (PGN, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return PGN{st}, err
}

func NewRootPGN(s *capnp.Segment) (PGN, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return PGN{st}, err
}

func ReadRootPGN(msg *capnp.Message) (PGN, error) {
	root, err := msg.RootPtr()
	return PGN{root.Struct()}, err
}

func (s PGN) String() string {
	str, _ := text.Marshal(0xa75b211d8d485722, s.Struct)
	return str
}

func (s PGN) Which() PGN_Which {
	return PGN_Which(s.Struct.Uint16(8))
}
func (s PGN) Id() uint64 {
	return s.Struct.Uint64(0)
}

func (s PGN) SetId(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s PGN) SetUnset() {
	s.Struct.SetUint16(8, 0)

}

func (s PGN) AddPLNEntryRequest() (AddPLNEntryRequest, error) {
	if s.Struct.Uint16(8) != 1 {
		panic("Which() != addPLNEntryRequest")
	}
	p, err := s.Struct.Ptr(0)
	return AddPLNEntryRequest{Struct: p.Struct()}, err
}

func (s PGN) HasAddPLNEntryRequest() bool {
	if s.Struct.Uint16(8) != 1 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PGN) SetAddPLNEntryRequest(v AddPLNEntryRequest) error {
	s.Struct.SetUint16(8, 1)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewAddPLNEntryRequest sets the addPLNEntryRequest field to a newly
// allocated AddPLNEntryRequest struct, preferring placement in s's segment.
func (s PGN) NewAddPLNEntryRequest() (AddPLNEntryRequest, error) {
	s.Struct.SetUint16(8, 1)
	ss, err := NewAddPLNEntryRequest(s.Struct.Segment())
	if err != nil {
		return AddPLNEntryRequest{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s PGN) AddPGNEntryRequest() (PGNEntry, error) {
	if s.Struct.Uint16(8) != 2 {
		panic("Which() != addPGNEntryRequest")
	}
	p, err := s.Struct.Ptr(0)
	return PGNEntry{Struct: p.Struct()}, err
}

func (s PGN) HasAddPGNEntryRequest() bool {
	if s.Struct.Uint16(8) != 2 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PGN) SetAddPGNEntryRequest(v PGNEntry) error {
	s.Struct.SetUint16(8, 2)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewAddPGNEntryRequest sets the addPGNEntryRequest field to a newly
// allocated PGNEntry struct, preferring placement in s's segment.
func (s PGN) NewAddPGNEntryRequest() (PGNEntry, error) {
	s.Struct.SetUint16(8, 2)
	ss, err := NewPGNEntry(s.Struct.Segment())
	if err != nil {
		return PGNEntry{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s PGN) PgnRep() (PGNRep, error) {
	if s.Struct.Uint16(8) != 3 {
		panic("Which() != pgnRep")
	}
	p, err := s.Struct.Ptr(0)
	return PGNRep{Struct: p.Struct()}, err
}

func (s PGN) HasPgnRep() bool {
	if s.Struct.Uint16(8) != 3 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PGN) SetPgnRep(v PGNRep) error {
	s.Struct.SetUint16(8, 3)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewPgnRep sets the pgnRep field to a newly
// allocated PGNRep struct, preferring placement in s's segment.
func (s PGN) NewPgnRep() (PGNRep, error) {
	s.Struct.SetUint16(8, 3)
	ss, err := NewPGNRep(s.Struct.Segment())
	if err != nil {
		return PGNRep{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s PGN) PgnList() (PGNList, error) {
	if s.Struct.Uint16(8) != 4 {
		panic("Which() != pgnList")
	}
	p, err := s.Struct.Ptr(0)
	return PGNList{Struct: p.Struct()}, err
}

func (s PGN) HasPgnList() bool {
	if s.Struct.Uint16(8) != 4 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PGN) SetPgnList(v PGNList) error {
	s.Struct.SetUint16(8, 4)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewPgnList sets the pgnList field to a newly
// allocated PGNList struct, preferring placement in s's segment.
func (s PGN) NewPgnList() (PGNList, error) {
	s.Struct.SetUint16(8, 4)
	ss, err := NewPGNList(s.Struct.Segment())
	if err != nil {
		return PGNList{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s PGN) PgnEntryRequest() (PGNEntryRequest, error) {
	if s.Struct.Uint16(8) != 5 {
		panic("Which() != pgnEntryRequest")
	}
	p, err := s.Struct.Ptr(0)
	return PGNEntryRequest{Struct: p.Struct()}, err
}

func (s PGN) HasPgnEntryRequest() bool {
	if s.Struct.Uint16(8) != 5 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PGN) SetPgnEntryRequest(v PGNEntryRequest) error {
	s.Struct.SetUint16(8, 5)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewPgnEntryRequest sets the pgnEntryRequest field to a newly
// allocated PGNEntryRequest struct, preferring placement in s's segment.
func (s PGN) NewPgnEntryRequest() (PGNEntryRequest, error) {
	s.Struct.SetUint16(8, 5)
	ss, err := NewPGNEntryRequest(s.Struct.Segment())
	if err != nil {
		return PGNEntryRequest{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s PGN) EmptyObject() (EmptyObject, error) {
	if s.Struct.Uint16(8) != 6 {
		panic("Which() != emptyObject")
	}
	p, err := s.Struct.Ptr(0)
	return EmptyObject{Struct: p.Struct()}, err
}

func (s PGN) HasEmptyObject() bool {
	if s.Struct.Uint16(8) != 6 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PGN) SetEmptyObject(v EmptyObject) error {
	s.Struct.SetUint16(8, 6)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewEmptyObject sets the emptyObject field to a newly
// allocated EmptyObject struct, preferring placement in s's segment.
func (s PGN) NewEmptyObject() (EmptyObject, error) {
	s.Struct.SetUint16(8, 6)
	ss, err := NewEmptyObject(s.Struct.Segment())
	if err != nil {
		return EmptyObject{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// PGN_List is a list of PGN.
type PGN_List struct{ capnp.List }

// NewPGN creates a new list of PGN.
func NewPGN_List(s *capnp.Segment, sz int32) (PGN_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return PGN_List{l}, err
}

func (s PGN_List) At(i int) PGN { return PGN{s.List.Struct(i)} }

func (s PGN_List) Set(i int, v PGN) error { return s.List.SetStruct(i, v.Struct) }

func (s PGN_List) String() string {
	str, _ := text.MarshalList(0xa75b211d8d485722, s.List)
	return str
}

// PGN_Promise is a wrapper for a PGN promised by a client call.
type PGN_Promise struct{ *capnp.Pipeline }

func (p PGN_Promise) Struct() (PGN, error) {
	s, err := p.Pipeline.Struct()
	return PGN{s}, err
}

func (p PGN_Promise) AddPLNEntryRequest() AddPLNEntryRequest_Promise {
	return AddPLNEntryRequest_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p PGN_Promise) AddPGNEntryRequest() PGNEntry_Promise {
	return PGNEntry_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p PGN_Promise) PgnRep() PGNRep_Promise {
	return PGNRep_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p PGN_Promise) PgnList() PGNList_Promise {
	return PGNList_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p PGN_Promise) PgnEntryRequest() PGNEntryRequest_Promise {
	return PGNEntryRequest_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p PGN_Promise) EmptyObject() EmptyObject_Promise {
	return EmptyObject_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type AddPLNEntryRequest struct{ capnp.Struct }

// AddPLNEntryRequest_TypeID is the unique identifier for the type AddPLNEntryRequest.
const AddPLNEntryRequest_TypeID = 0xd174b993a12ebc4d

func NewAddPLNEntryRequest(s *capnp.Segment) (AddPLNEntryRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AddPLNEntryRequest{st}, err
}

func NewRootAddPLNEntryRequest(s *capnp.Segment) (AddPLNEntryRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AddPLNEntryRequest{st}, err
}

func ReadRootAddPLNEntryRequest(msg *capnp.Message) (AddPLNEntryRequest, error) {
	root, err := msg.RootPtr()
	return AddPLNEntryRequest{root.Struct()}, err
}

func (s AddPLNEntryRequest) String() string {
	str, _ := text.Marshal(0xd174b993a12ebc4d, s.Struct)
	return str
}

func (s AddPLNEntryRequest) Entry() (PlnListEntry, error) {
	p, err := s.Struct.Ptr(0)
	return PlnListEntry{Struct: p.Struct()}, err
}

func (s AddPLNEntryRequest) HasEntry() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s AddPLNEntryRequest) SetEntry(v PlnListEntry) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewEntry sets the entry field to a newly
// allocated PlnListEntry struct, preferring placement in s's segment.
func (s AddPLNEntryRequest) NewEntry() (PlnListEntry, error) {
	ss, err := NewPlnListEntry(s.Struct.Segment())
	if err != nil {
		return PlnListEntry{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// AddPLNEntryRequest_List is a list of AddPLNEntryRequest.
type AddPLNEntryRequest_List struct{ capnp.List }

// NewAddPLNEntryRequest creates a new list of AddPLNEntryRequest.
func NewAddPLNEntryRequest_List(s *capnp.Segment, sz int32) (AddPLNEntryRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return AddPLNEntryRequest_List{l}, err
}

func (s AddPLNEntryRequest_List) At(i int) AddPLNEntryRequest {
	return AddPLNEntryRequest{s.List.Struct(i)}
}

func (s AddPLNEntryRequest_List) Set(i int, v AddPLNEntryRequest) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s AddPLNEntryRequest_List) String() string {
	str, _ := text.MarshalList(0xd174b993a12ebc4d, s.List)
	return str
}

// AddPLNEntryRequest_Promise is a wrapper for a AddPLNEntryRequest promised by a client call.
type AddPLNEntryRequest_Promise struct{ *capnp.Pipeline }

func (p AddPLNEntryRequest_Promise) Struct() (AddPLNEntryRequest, error) {
	s, err := p.Pipeline.Struct()
	return AddPLNEntryRequest{s}, err
}

func (p AddPLNEntryRequest_Promise) Entry() PlnListEntry_Promise {
	return PlnListEntry_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type PGNList struct{ capnp.Struct }

// PGNList_TypeID is the unique identifier for the type PGNList.
const PGNList_TypeID = 0xd8cf9ec0e76eae18

func NewPGNList(s *capnp.Segment) (PGNList, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return PGNList{st}, err
}

func NewRootPGNList(s *capnp.Segment) (PGNList, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return PGNList{st}, err
}

func ReadRootPGNList(msg *capnp.Message) (PGNList, error) {
	root, err := msg.RootPtr()
	return PGNList{root.Struct()}, err
}

func (s PGNList) String() string {
	str, _ := text.Marshal(0xd8cf9ec0e76eae18, s.Struct)
	return str
}

func (s PGNList) L() (capnp.DataList, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.DataList{List: p.List()}, err
}

func (s PGNList) HasL() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PGNList) SetL(v capnp.DataList) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewL sets the l field to a newly
// allocated capnp.DataList, preferring placement in s's segment.
func (s PGNList) NewL(n int32) (capnp.DataList, error) {
	l, err := capnp.NewDataList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.DataList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s PGNList) EmptyObjects() (capnp.DataList, error) {
	p, err := s.Struct.Ptr(1)
	return capnp.DataList{List: p.List()}, err
}

func (s PGNList) HasEmptyObjects() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s PGNList) SetEmptyObjects(v capnp.DataList) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewEmptyObjects sets the emptyObjects field to a newly
// allocated capnp.DataList, preferring placement in s's segment.
func (s PGNList) NewEmptyObjects(n int32) (capnp.DataList, error) {
	l, err := capnp.NewDataList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.DataList{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s PGNList) Timestamp() uint64 {
	return s.Struct.Uint64(0)
}

func (s PGNList) SetTimestamp(v uint64) {
	s.Struct.SetUint64(0, v)
}

// PGNList_List is a list of PGNList.
type PGNList_List struct{ capnp.List }

// NewPGNList creates a new list of PGNList.
func NewPGNList_List(s *capnp.Segment, sz int32) (PGNList_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return PGNList_List{l}, err
}

func (s PGNList_List) At(i int) PGNList { return PGNList{s.List.Struct(i)} }

func (s PGNList_List) Set(i int, v PGNList) error { return s.List.SetStruct(i, v.Struct) }

func (s PGNList_List) String() string {
	str, _ := text.MarshalList(0xd8cf9ec0e76eae18, s.List)
	return str
}

// PGNList_Promise is a wrapper for a PGNList promised by a client call.
type PGNList_Promise struct{ *capnp.Pipeline }

func (p PGNList_Promise) Struct() (PGNList, error) {
	s, err := p.Pipeline.Struct()
	return PGNList{s}, err
}

type PGNEntry struct{ capnp.Struct }

// PGNEntry_TypeID is the unique identifier for the type PGNEntry.
const PGNEntry_TypeID = 0xee3edfe035cdf0b9

func NewPGNEntry(s *capnp.Segment) (PGNEntry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 5})
	return PGNEntry{st}, err
}

func NewRootPGNEntry(s *capnp.Segment) (PGNEntry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 5})
	return PGNEntry{st}, err
}

func ReadRootPGNEntry(msg *capnp.Message) (PGNEntry, error) {
	root, err := msg.RootPtr()
	return PGNEntry{root.Struct()}, err
}

func (s PGNEntry) String() string {
	str, _ := text.Marshal(0xee3edfe035cdf0b9, s.Struct)
	return str
}

func (s PGNEntry) Entry() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s PGNEntry) HasEntry() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PGNEntry) SetEntry(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s PGNEntry) EntryType() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s PGNEntry) HasEntryType() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s PGNEntry) EntryTypeBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s PGNEntry) SetEntryType(v string) error {
	return s.Struct.SetText(1, v)
}

func (s PGNEntry) CommitID() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s PGNEntry) HasCommitID() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s PGNEntry) CommitIDBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s PGNEntry) SetCommitID(v string) error {
	return s.Struct.SetText(2, v)
}

func (s PGNEntry) PgnId() (string, error) {
	p, err := s.Struct.Ptr(3)
	return p.Text(), err
}

func (s PGNEntry) HasPgnId() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s PGNEntry) PgnIdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return p.TextBytes(), err
}

func (s PGNEntry) SetPgnId(v string) error {
	return s.Struct.SetText(3, v)
}

func (s PGNEntry) Timestamp() uint64 {
	return s.Struct.Uint64(0)
}

func (s PGNEntry) SetTimestamp(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s PGNEntry) SrcIA() (string, error) {
	p, err := s.Struct.Ptr(4)
	return p.Text(), err
}

func (s PGNEntry) HasSrcIA() bool {
	p, err := s.Struct.Ptr(4)
	return p.IsValid() || err != nil
}

func (s PGNEntry) SrcIABytes() ([]byte, error) {
	p, err := s.Struct.Ptr(4)
	return p.TextBytes(), err
}

func (s PGNEntry) SetSrcIA(v string) error {
	return s.Struct.SetText(4, v)
}

// PGNEntry_List is a list of PGNEntry.
type PGNEntry_List struct{ capnp.List }

// NewPGNEntry creates a new list of PGNEntry.
func NewPGNEntry_List(s *capnp.Segment, sz int32) (PGNEntry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 5}, sz)
	return PGNEntry_List{l}, err
}

func (s PGNEntry_List) At(i int) PGNEntry { return PGNEntry{s.List.Struct(i)} }

func (s PGNEntry_List) Set(i int, v PGNEntry) error { return s.List.SetStruct(i, v.Struct) }

func (s PGNEntry_List) String() string {
	str, _ := text.MarshalList(0xee3edfe035cdf0b9, s.List)
	return str
}

// PGNEntry_Promise is a wrapper for a PGNEntry promised by a client call.
type PGNEntry_Promise struct{ *capnp.Pipeline }

func (p PGNEntry_Promise) Struct() (PGNEntry, error) {
	s, err := p.Pipeline.Struct()
	return PGNEntry{s}, err
}

type PGNRep struct{ capnp.Struct }

// PGNRep_TypeID is the unique identifier for the type PGNRep.
const PGNRep_TypeID = 0xd8fc85bcc29cc75e

func NewPGNRep(s *capnp.Segment) (PGNRep, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PGNRep{st}, err
}

func NewRootPGNRep(s *capnp.Segment) (PGNRep, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PGNRep{st}, err
}

func ReadRootPGNRep(msg *capnp.Message) (PGNRep, error) {
	root, err := msg.RootPtr()
	return PGNRep{root.Struct()}, err
}

func (s PGNRep) String() string {
	str, _ := text.Marshal(0xd8fc85bcc29cc75e, s.Struct)
	return str
}

func (s PGNRep) Entry() (PGNEntry, error) {
	p, err := s.Struct.Ptr(0)
	return PGNEntry{Struct: p.Struct()}, err
}

func (s PGNRep) HasEntry() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PGNRep) SetEntry(v PGNEntry) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewEntry sets the entry field to a newly
// allocated PGNEntry struct, preferring placement in s's segment.
func (s PGNRep) NewEntry() (PGNEntry, error) {
	ss, err := NewPGNEntry(s.Struct.Segment())
	if err != nil {
		return PGNEntry{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s PGNRep) Timestamp() uint64 {
	return s.Struct.Uint64(0)
}

func (s PGNRep) SetTimestamp(v uint64) {
	s.Struct.SetUint64(0, v)
}

// PGNRep_List is a list of PGNRep.
type PGNRep_List struct{ capnp.List }

// NewPGNRep creates a new list of PGNRep.
func NewPGNRep_List(s *capnp.Segment, sz int32) (PGNRep_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return PGNRep_List{l}, err
}

func (s PGNRep_List) At(i int) PGNRep { return PGNRep{s.List.Struct(i)} }

func (s PGNRep_List) Set(i int, v PGNRep) error { return s.List.SetStruct(i, v.Struct) }

func (s PGNRep_List) String() string {
	str, _ := text.MarshalList(0xd8fc85bcc29cc75e, s.List)
	return str
}

// PGNRep_Promise is a wrapper for a PGNRep promised by a client call.
type PGNRep_Promise struct{ *capnp.Pipeline }

func (p PGNRep_Promise) Struct() (PGNRep, error) {
	s, err := p.Pipeline.Struct()
	return PGNRep{s}, err
}

func (p PGNRep_Promise) Entry() PGNEntry_Promise {
	return PGNEntry_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type PGNEntryRequest struct{ capnp.Struct }

// PGNEntryRequest_TypeID is the unique identifier for the type PGNEntryRequest.
const PGNEntryRequest_TypeID = 0x8c6e22c459318546

func NewPGNEntryRequest(s *capnp.Segment) (PGNEntryRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return PGNEntryRequest{st}, err
}

func NewRootPGNEntryRequest(s *capnp.Segment) (PGNEntryRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return PGNEntryRequest{st}, err
}

func ReadRootPGNEntryRequest(msg *capnp.Message) (PGNEntryRequest, error) {
	root, err := msg.RootPtr()
	return PGNEntryRequest{root.Struct()}, err
}

func (s PGNEntryRequest) String() string {
	str, _ := text.Marshal(0x8c6e22c459318546, s.Struct)
	return str
}

func (s PGNEntryRequest) EntryType() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s PGNEntryRequest) HasEntryType() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PGNEntryRequest) EntryTypeBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s PGNEntryRequest) SetEntryType(v string) error {
	return s.Struct.SetText(0, v)
}

func (s PGNEntryRequest) SrcIA() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s PGNEntryRequest) HasSrcIA() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s PGNEntryRequest) SrcIABytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s PGNEntryRequest) SetSrcIA(v string) error {
	return s.Struct.SetText(1, v)
}

// PGNEntryRequest_List is a list of PGNEntryRequest.
type PGNEntryRequest_List struct{ capnp.List }

// NewPGNEntryRequest creates a new list of PGNEntryRequest.
func NewPGNEntryRequest_List(s *capnp.Segment, sz int32) (PGNEntryRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return PGNEntryRequest_List{l}, err
}

func (s PGNEntryRequest_List) At(i int) PGNEntryRequest { return PGNEntryRequest{s.List.Struct(i)} }

func (s PGNEntryRequest_List) Set(i int, v PGNEntryRequest) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s PGNEntryRequest_List) String() string {
	str, _ := text.MarshalList(0x8c6e22c459318546, s.List)
	return str
}

// PGNEntryRequest_Promise is a wrapper for a PGNEntryRequest promised by a client call.
type PGNEntryRequest_Promise struct{ *capnp.Pipeline }

func (p PGNEntryRequest_Promise) Struct() (PGNEntryRequest, error) {
	s, err := p.Pipeline.Struct()
	return PGNEntryRequest{s}, err
}

type EmptyObject struct{ capnp.Struct }

// EmptyObject_TypeID is the unique identifier for the type EmptyObject.
const EmptyObject_TypeID = 0xab69dc8b897d6bc2

func NewEmptyObject(s *capnp.Segment) (EmptyObject, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return EmptyObject{st}, err
}

func NewRootEmptyObject(s *capnp.Segment) (EmptyObject, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return EmptyObject{st}, err
}

func ReadRootEmptyObject(msg *capnp.Message) (EmptyObject, error) {
	root, err := msg.RootPtr()
	return EmptyObject{root.Struct()}, err
}

func (s EmptyObject) String() string {
	str, _ := text.Marshal(0xab69dc8b897d6bc2, s.Struct)
	return str
}

func (s EmptyObject) Str() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s EmptyObject) HasStr() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s EmptyObject) StrBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s EmptyObject) SetStr(v string) error {
	return s.Struct.SetText(0, v)
}

func (s EmptyObject) Isd() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s EmptyObject) HasIsd() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s EmptyObject) IsdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s EmptyObject) SetIsd(v string) error {
	return s.Struct.SetText(1, v)
}

func (s EmptyObject) Timestamp() uint64 {
	return s.Struct.Uint64(0)
}

func (s EmptyObject) SetTimestamp(v uint64) {
	s.Struct.SetUint64(0, v)
}

// EmptyObject_List is a list of EmptyObject.
type EmptyObject_List struct{ capnp.List }

// NewEmptyObject creates a new list of EmptyObject.
func NewEmptyObject_List(s *capnp.Segment, sz int32) (EmptyObject_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return EmptyObject_List{l}, err
}

func (s EmptyObject_List) At(i int) EmptyObject { return EmptyObject{s.List.Struct(i)} }

func (s EmptyObject_List) Set(i int, v EmptyObject) error { return s.List.SetStruct(i, v.Struct) }

func (s EmptyObject_List) String() string {
	str, _ := text.MarshalList(0xab69dc8b897d6bc2, s.List)
	return str
}

// EmptyObject_Promise is a wrapper for a EmptyObject promised by a client call.
type EmptyObject_Promise struct{ *capnp.Pipeline }

func (p EmptyObject_Promise) Struct() (EmptyObject, error) {
	s, err := p.Pipeline.Struct()
	return EmptyObject{s}, err
}

const schema_de42b02816b2b3bf = "x\xda\x8cT]h\x1cU\x14>\xdf=3\xd9\xa6d" +
	"\xec\x8e\xb3H\x11\xcbjPh\xc0\x96\xa6U\x90\x80\xf6" +
	"\x87\xae1\xb2M\xf7l\x95&(B\xb2\x19\x96\x8d\xee" +
	"t\xba;U\x02\x8a \xe4\xa1\xfe\xbcX_,U\x14" +
	"\x14\x0b\xa2\xc6\xda\x97@\xc0R\x84\xbe(ZA\x88\x10" +
	"\xd4\x17\xb1\x88J+\x16Z\x8d^\xb93\xbb\xb3\xeb&" +
	"\x14\xdf\xce\xdc\xf9\xee\xf9\xcew\xcew\xee\x0e\xa5\xf6\xa8" +
	"a\xfb\x88\"\x92\xdb\xec>\xfd\xe0\xfc\xf0\xe4g\x83\xc1" +
	"\xcb\xe4n\x84\xfe\xf4\x933\xb7l]\xd8\xf7\x1d\xd9*" +
	"C\xe4m\xc1\xd7\xde\x10Lt\x17\x9e!\xe8\xc1\xc3\x0f" +
	"\xbd\xb2\xe5\x8e\xc7\xde#\xd9\x08\xd5\x01\x17\x90\xc9\xc0\xf2" +
	"\xe6\xd1\xf0\x8e\x1b\xf4\xaey\\\x00A\x9f\x7f\xf2\xb9\xe3" +
	"/\xad\xd4\xde7\xf05\xb9\xa7\xf8\x8cWc\x13\xf9\xfc" +
	"\x11A\x1fX\xda\xfe\xf6\x89\xc5\xe8bO\x1d1;\xac" +
	"\x9f=\xc72Q\xbf\xb5\x9b\xa07\x7f\x18\xfct\xee\xcd" +
	"/\x97\xd7M<d\xbd\xea\x0d\xc7\xe0m\x96I\xfc\xc4" +
	"\x85S\xe7\x97\xe6W\xd7\x80\xe3\xcc\xbfZ/zWc" +
	"\xf0\x15\xcb(\\\xbc\xfc\xc5\xbd?|\xff\xc0o\xbd`" +
	"\xdb@\xc4>\xe9M\x9ah\xd7\xa3\xf6a#0\xac\x06" +
	"\xdb+Sa\xa0\xc2\x91\xd2\xe8x!\x88\x1ase\xff" +
	"\xe81\xbf\x89\xa8\x04\xc8\x06\xb6\x88,\x10\xb9Ce\"" +
	"\xd9\xca\x90{\x14\\ \x07s8\xbc\x93H\xeef\xc8" +
	"}\x0a\xda7\x97\x1f\x99\x0b\x09>\x06Ha\x80\x90o" +
	"6*c{\xdb_)\x19\xe5c6Cp{Jp" +
	"\xf1V\"\xf9\x9c!\xcb\x0a\x0e\xb4N\x18\xbe1\x0c_" +
	"1dE\xc1Q\xff\xe8\x1c\x14\x91\xfb\xedI\"Ya" +
	"\xc8%\x05\x87\xff\xd690\x91\xfb\xa39\xbd\xc4\x90?" +
	"\x14\x1ckU\xe7`\x11\xb9WF\x88\xe4\x17\x86\\S" +
	"p\xec\xbft\x0e6\x91{u\x1f\x91\\f\xc8\xaa\x82" +
	"\xd3\xf7\xa7\xce\xa1\x8f\xc8\xbd\xfe\x02\x91\\c\x1c\xb2\xa0" +
	"\xe0d\xae\xeb\\2<L\x13\x95\xc184\x00\x05\xae" +
	"\xcd\xa0\x9f\x14\xfa\x09\xf9cA\xd3\x8f\xa8OO\xcd\xcc" +
	"\x94\x8a\xe3\x85\x00\xed\xfeq3B\xb6\xe3\x08\x02\xb2\x84" +
	"\x186\xba\x16\x96\x8e,\x81\xed\x0e\xabA\xd9\x0f\x91\xed" +
	"\x0c>\xf9\xf1|X\x0d\x8a\xb5\xf8J\xea\x9fV\xe6\xb0" +
	"\x1a\xc4\xc3C2\xbd\x88\x90\xed\xecE\x0b\xe3\xd7\xc3h" +
	"\xee\xe0\xf4,e\xfc\x8a\xc9\x91\x9a\xbb\x93#\x1e\x0f\xc2" +
	"\x91B\x0c\xcdO\xcf\xfa\x95\xd8\x07\x03\xe9\x98\x0a\x83D" +
	"\xb2\x87!\xc5.\x1f\x8c\x99\xc3\xfd\x0c))@%3" +
	":`\x0cSd\xc8\x84B\xa6\x195\xda.\xc8\xd4\x9a" +
	"3\xa9#\xa2Z\xddoFSuB\xd8\xeei\xb7%" +
	"\xf7\xb6\xda\x9a\xb4k\x93\x11f\xaa\xb1\xd2j\x1cc\x8f" +
	"\x0d\x0c\xc9)\xe4c\x03\"\xabw\xfe~\xff\xc1\x89\xa7" +
	"O,\xaf\xa3\xab4:^\xac\xb5\xbc\xdd\xa5\xe9\xe6\x96" +
	"\xa6\xc7\xbb4M\xce\x12\xc9\x04C\xa2\x8e\xa6\xa3FS" +
	"\xc8\x90g\x15\xf0\x14n\"\x94\x18pH\x99\xb0\xd3\xdf" +
	"M~%j\xf6\xfe\xbd\x91\xd4\xa4\xb2\xb2\x1f\x12\xf5l" +
	"\x9d\xd1w'Cv(\xb4\x0b\xdbV\xee,]\xaa\xb9" +
	"\xc7B\xff\x83\xad\x10D\xdc\x983t\x9bS\xba\xd7\x0d" +
	"\xddk\x0cy\xab\xab\x11o\x18\xbeS\x0c9\xad\xe0\xaa" +
	"V'\xde}\x98H\xdea\xc8\x82\x82\xcb\x9c,\xe0\x07" +
	"\xe6\xfai\x86\x9cU\x80\x95\xac\xdf\xc7\xe6\xf6\x02C\x96" +
	"\x14\\\xdbJ\xb6o\xd1\x00\xcf2\xe4\\*\xc1\xb4\xc9" +
	"\xa1u_\x11]9R\xaf\xd7\xa2\xb1\xfdD\x94\xbe," +
	"a5\x18\xbb\xa1\x8f\xfe\xfb\xf6\xfc\x1b\x00\x00\xff\xff\x7f" +
	"u\x80["

func init() {
	schemas.Register(schema_de42b02816b2b3bf,
		0x8c6e22c459318546,
		0xa75b211d8d485722,
		0xab69dc8b897d6bc2,
		0xd174b993a12ebc4d,
		0xd8cf9ec0e76eae18,
		0xd8fc85bcc29cc75e,
		0xee3edfe035cdf0b9)
}
