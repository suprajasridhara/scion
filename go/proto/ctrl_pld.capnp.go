// Code generated by capnpc-go. DO NOT EDIT.

package proto

import (
	strconv "strconv"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type SignedCtrlPld struct{ capnp.Struct }

// SignedCtrlPld_TypeID is the unique identifier for the type SignedCtrlPld.
const SignedCtrlPld_TypeID = 0xc34ac578b174f099

func NewSignedCtrlPld(s *capnp.Segment) (SignedCtrlPld, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SignedCtrlPld{st}, err
}

func NewRootSignedCtrlPld(s *capnp.Segment) (SignedCtrlPld, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SignedCtrlPld{st}, err
}

func ReadRootSignedCtrlPld(msg *capnp.Message) (SignedCtrlPld, error) {
	root, err := msg.RootPtr()
	return SignedCtrlPld{root.Struct()}, err
}

func (s SignedCtrlPld) String() string {
	str, _ := text.Marshal(0xc34ac578b174f099, s.Struct)
	return str
}

func (s SignedCtrlPld) Blob() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s SignedCtrlPld) HasBlob() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SignedCtrlPld) SetBlob(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s SignedCtrlPld) Sign() (Sign, error) {
	p, err := s.Struct.Ptr(1)
	return Sign{Struct: p.Struct()}, err
}

func (s SignedCtrlPld) HasSign() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s SignedCtrlPld) SetSign(v Sign) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewSign sets the sign field to a newly
// allocated Sign struct, preferring placement in s's segment.
func (s SignedCtrlPld) NewSign() (Sign, error) {
	ss, err := NewSign(s.Struct.Segment())
	if err != nil {
		return Sign{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// SignedCtrlPld_List is a list of SignedCtrlPld.
type SignedCtrlPld_List struct{ capnp.List }

// NewSignedCtrlPld creates a new list of SignedCtrlPld.
func NewSignedCtrlPld_List(s *capnp.Segment, sz int32) (SignedCtrlPld_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return SignedCtrlPld_List{l}, err
}

func (s SignedCtrlPld_List) At(i int) SignedCtrlPld { return SignedCtrlPld{s.List.Struct(i)} }

func (s SignedCtrlPld_List) Set(i int, v SignedCtrlPld) error { return s.List.SetStruct(i, v.Struct) }

func (s SignedCtrlPld_List) String() string {
	str, _ := text.MarshalList(0xc34ac578b174f099, s.List)
	return str
}

// SignedCtrlPld_Promise is a wrapper for a SignedCtrlPld promised by a client call.
type SignedCtrlPld_Promise struct{ *capnp.Pipeline }

func (p SignedCtrlPld_Promise) Struct() (SignedCtrlPld, error) {
	s, err := p.Pipeline.Struct()
	return SignedCtrlPld{s}, err
}

func (p SignedCtrlPld_Promise) Sign() Sign_Promise {
	return Sign_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

type CtrlPld struct{ capnp.Struct }
type CtrlPld_Which uint16

const (
	CtrlPld_Which_unset     CtrlPld_Which = 0
	CtrlPld_Which_pcb       CtrlPld_Which = 1
	CtrlPld_Which_ifid      CtrlPld_Which = 2
	CtrlPld_Which_certMgmt  CtrlPld_Which = 3
	CtrlPld_Which_pathMgmt  CtrlPld_Which = 4
	CtrlPld_Which_sibra     CtrlPld_Which = 5
	CtrlPld_Which_drkeyMgmt CtrlPld_Which = 6
	CtrlPld_Which_sig       CtrlPld_Which = 7
	CtrlPld_Which_extn      CtrlPld_Which = 8
	CtrlPld_Which_ack       CtrlPld_Which = 9
	CtrlPld_Which_pln       CtrlPld_Which = 10
	CtrlPld_Which_pgn       CtrlPld_Which = 11
	CtrlPld_Which_ms        CtrlPld_Which = 12
)

func (w CtrlPld_Which) String() string {
	const s = "unsetpcbifidcertMgmtpathMgmtsibradrkeyMgmtsigextnackplnpgnms"
	switch w {
	case CtrlPld_Which_unset:
		return s[0:5]
	case CtrlPld_Which_pcb:
		return s[5:8]
	case CtrlPld_Which_ifid:
		return s[8:12]
	case CtrlPld_Which_certMgmt:
		return s[12:20]
	case CtrlPld_Which_pathMgmt:
		return s[20:28]
	case CtrlPld_Which_sibra:
		return s[28:33]
	case CtrlPld_Which_drkeyMgmt:
		return s[33:42]
	case CtrlPld_Which_sig:
		return s[42:45]
	case CtrlPld_Which_extn:
		return s[45:49]
	case CtrlPld_Which_ack:
		return s[49:52]
	case CtrlPld_Which_pln:
		return s[52:55]
	case CtrlPld_Which_pgn:
		return s[55:58]
	case CtrlPld_Which_ms:
		return s[58:60]

	}
	return "CtrlPld_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// CtrlPld_TypeID is the unique identifier for the type CtrlPld.
const CtrlPld_TypeID = 0x8e6af2c877489f54

func NewCtrlPld(s *capnp.Segment) (CtrlPld, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return CtrlPld{st}, err
}

func NewRootCtrlPld(s *capnp.Segment) (CtrlPld, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return CtrlPld{st}, err
}

func ReadRootCtrlPld(msg *capnp.Message) (CtrlPld, error) {
	root, err := msg.RootPtr()
	return CtrlPld{root.Struct()}, err
}

func (s CtrlPld) String() string {
	str, _ := text.Marshal(0x8e6af2c877489f54, s.Struct)
	return str
}

func (s CtrlPld) Which() CtrlPld_Which {
	return CtrlPld_Which(s.Struct.Uint16(0))
}
func (s CtrlPld) SetUnset() {
	s.Struct.SetUint16(0, 0)

}

func (s CtrlPld) Pcb() (PCB, error) {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != pcb")
	}
	p, err := s.Struct.Ptr(0)
	return PCB{Struct: p.Struct()}, err
}

func (s CtrlPld) HasPcb() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CtrlPld) SetPcb(v PCB) error {
	s.Struct.SetUint16(0, 1)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewPcb sets the pcb field to a newly
// allocated PCB struct, preferring placement in s's segment.
func (s CtrlPld) NewPcb() (PCB, error) {
	s.Struct.SetUint16(0, 1)
	ss, err := NewPCB(s.Struct.Segment())
	if err != nil {
		return PCB{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s CtrlPld) Ifid() (IFID, error) {
	if s.Struct.Uint16(0) != 2 {
		panic("Which() != ifid")
	}
	p, err := s.Struct.Ptr(0)
	return IFID{Struct: p.Struct()}, err
}

func (s CtrlPld) HasIfid() bool {
	if s.Struct.Uint16(0) != 2 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CtrlPld) SetIfid(v IFID) error {
	s.Struct.SetUint16(0, 2)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewIfid sets the ifid field to a newly
// allocated IFID struct, preferring placement in s's segment.
func (s CtrlPld) NewIfid() (IFID, error) {
	s.Struct.SetUint16(0, 2)
	ss, err := NewIFID(s.Struct.Segment())
	if err != nil {
		return IFID{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s CtrlPld) CertMgmt() (CertMgmt, error) {
	if s.Struct.Uint16(0) != 3 {
		panic("Which() != certMgmt")
	}
	p, err := s.Struct.Ptr(0)
	return CertMgmt{Struct: p.Struct()}, err
}

func (s CtrlPld) HasCertMgmt() bool {
	if s.Struct.Uint16(0) != 3 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CtrlPld) SetCertMgmt(v CertMgmt) error {
	s.Struct.SetUint16(0, 3)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewCertMgmt sets the certMgmt field to a newly
// allocated CertMgmt struct, preferring placement in s's segment.
func (s CtrlPld) NewCertMgmt() (CertMgmt, error) {
	s.Struct.SetUint16(0, 3)
	ss, err := NewCertMgmt(s.Struct.Segment())
	if err != nil {
		return CertMgmt{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s CtrlPld) PathMgmt() (PathMgmt, error) {
	if s.Struct.Uint16(0) != 4 {
		panic("Which() != pathMgmt")
	}
	p, err := s.Struct.Ptr(0)
	return PathMgmt{Struct: p.Struct()}, err
}

func (s CtrlPld) HasPathMgmt() bool {
	if s.Struct.Uint16(0) != 4 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CtrlPld) SetPathMgmt(v PathMgmt) error {
	s.Struct.SetUint16(0, 4)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewPathMgmt sets the pathMgmt field to a newly
// allocated PathMgmt struct, preferring placement in s's segment.
func (s CtrlPld) NewPathMgmt() (PathMgmt, error) {
	s.Struct.SetUint16(0, 4)
	ss, err := NewPathMgmt(s.Struct.Segment())
	if err != nil {
		return PathMgmt{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s CtrlPld) Sibra() (SibraPayload, error) {
	if s.Struct.Uint16(0) != 5 {
		panic("Which() != sibra")
	}
	p, err := s.Struct.Ptr(0)
	return SibraPayload{Struct: p.Struct()}, err
}

func (s CtrlPld) HasSibra() bool {
	if s.Struct.Uint16(0) != 5 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CtrlPld) SetSibra(v SibraPayload) error {
	s.Struct.SetUint16(0, 5)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSibra sets the sibra field to a newly
// allocated SibraPayload struct, preferring placement in s's segment.
func (s CtrlPld) NewSibra() (SibraPayload, error) {
	s.Struct.SetUint16(0, 5)
	ss, err := NewSibraPayload(s.Struct.Segment())
	if err != nil {
		return SibraPayload{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s CtrlPld) DrkeyMgmt() (DRKeyMgmt, error) {
	if s.Struct.Uint16(0) != 6 {
		panic("Which() != drkeyMgmt")
	}
	p, err := s.Struct.Ptr(0)
	return DRKeyMgmt{Struct: p.Struct()}, err
}

func (s CtrlPld) HasDrkeyMgmt() bool {
	if s.Struct.Uint16(0) != 6 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CtrlPld) SetDrkeyMgmt(v DRKeyMgmt) error {
	s.Struct.SetUint16(0, 6)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewDrkeyMgmt sets the drkeyMgmt field to a newly
// allocated DRKeyMgmt struct, preferring placement in s's segment.
func (s CtrlPld) NewDrkeyMgmt() (DRKeyMgmt, error) {
	s.Struct.SetUint16(0, 6)
	ss, err := NewDRKeyMgmt(s.Struct.Segment())
	if err != nil {
		return DRKeyMgmt{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s CtrlPld) Sig() (SIGCtrl, error) {
	if s.Struct.Uint16(0) != 7 {
		panic("Which() != sig")
	}
	p, err := s.Struct.Ptr(0)
	return SIGCtrl{Struct: p.Struct()}, err
}

func (s CtrlPld) HasSig() bool {
	if s.Struct.Uint16(0) != 7 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CtrlPld) SetSig(v SIGCtrl) error {
	s.Struct.SetUint16(0, 7)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSig sets the sig field to a newly
// allocated SIGCtrl struct, preferring placement in s's segment.
func (s CtrlPld) NewSig() (SIGCtrl, error) {
	s.Struct.SetUint16(0, 7)
	ss, err := NewSIGCtrl(s.Struct.Segment())
	if err != nil {
		return SIGCtrl{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s CtrlPld) Extn() (CtrlExtnDataList, error) {
	if s.Struct.Uint16(0) != 8 {
		panic("Which() != extn")
	}
	p, err := s.Struct.Ptr(0)
	return CtrlExtnDataList{Struct: p.Struct()}, err
}

func (s CtrlPld) HasExtn() bool {
	if s.Struct.Uint16(0) != 8 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CtrlPld) SetExtn(v CtrlExtnDataList) error {
	s.Struct.SetUint16(0, 8)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewExtn sets the extn field to a newly
// allocated CtrlExtnDataList struct, preferring placement in s's segment.
func (s CtrlPld) NewExtn() (CtrlExtnDataList, error) {
	s.Struct.SetUint16(0, 8)
	ss, err := NewCtrlExtnDataList(s.Struct.Segment())
	if err != nil {
		return CtrlExtnDataList{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s CtrlPld) Ack() (Ack, error) {
	if s.Struct.Uint16(0) != 9 {
		panic("Which() != ack")
	}
	p, err := s.Struct.Ptr(0)
	return Ack{Struct: p.Struct()}, err
}

func (s CtrlPld) HasAck() bool {
	if s.Struct.Uint16(0) != 9 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CtrlPld) SetAck(v Ack) error {
	s.Struct.SetUint16(0, 9)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewAck sets the ack field to a newly
// allocated Ack struct, preferring placement in s's segment.
func (s CtrlPld) NewAck() (Ack, error) {
	s.Struct.SetUint16(0, 9)
	ss, err := NewAck(s.Struct.Segment())
	if err != nil {
		return Ack{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s CtrlPld) Pln() (PLN, error) {
	if s.Struct.Uint16(0) != 10 {
		panic("Which() != pln")
	}
	p, err := s.Struct.Ptr(0)
	return PLN{Struct: p.Struct()}, err
}

func (s CtrlPld) HasPln() bool {
	if s.Struct.Uint16(0) != 10 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CtrlPld) SetPln(v PLN) error {
	s.Struct.SetUint16(0, 10)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewPln sets the pln field to a newly
// allocated PLN struct, preferring placement in s's segment.
func (s CtrlPld) NewPln() (PLN, error) {
	s.Struct.SetUint16(0, 10)
	ss, err := NewPLN(s.Struct.Segment())
	if err != nil {
		return PLN{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s CtrlPld) Pgn() (PGN, error) {
	if s.Struct.Uint16(0) != 11 {
		panic("Which() != pgn")
	}
	p, err := s.Struct.Ptr(0)
	return PGN{Struct: p.Struct()}, err
}

func (s CtrlPld) HasPgn() bool {
	if s.Struct.Uint16(0) != 11 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CtrlPld) SetPgn(v PGN) error {
	s.Struct.SetUint16(0, 11)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewPgn sets the pgn field to a newly
// allocated PGN struct, preferring placement in s's segment.
func (s CtrlPld) NewPgn() (PGN, error) {
	s.Struct.SetUint16(0, 11)
	ss, err := NewPGN(s.Struct.Segment())
	if err != nil {
		return PGN{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s CtrlPld) Ms() (MS, error) {
	if s.Struct.Uint16(0) != 12 {
		panic("Which() != ms")
	}
	p, err := s.Struct.Ptr(0)
	return MS{Struct: p.Struct()}, err
}

func (s CtrlPld) HasMs() bool {
	if s.Struct.Uint16(0) != 12 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CtrlPld) SetMs(v MS) error {
	s.Struct.SetUint16(0, 12)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewMs sets the ms field to a newly
// allocated MS struct, preferring placement in s's segment.
func (s CtrlPld) NewMs() (MS, error) {
	s.Struct.SetUint16(0, 12)
	ss, err := NewMS(s.Struct.Segment())
	if err != nil {
		return MS{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s CtrlPld) ReqId() uint64 {
	return s.Struct.Uint64(8)
}

func (s CtrlPld) SetReqId(v uint64) {
	s.Struct.SetUint64(8, v)
}

func (s CtrlPld) TraceId() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s CtrlPld) HasTraceId() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s CtrlPld) SetTraceId(v []byte) error {
	return s.Struct.SetData(1, v)
}

// CtrlPld_List is a list of CtrlPld.
type CtrlPld_List struct{ capnp.List }

// NewCtrlPld creates a new list of CtrlPld.
func NewCtrlPld_List(s *capnp.Segment, sz int32) (CtrlPld_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2}, sz)
	return CtrlPld_List{l}, err
}

func (s CtrlPld_List) At(i int) CtrlPld { return CtrlPld{s.List.Struct(i)} }

func (s CtrlPld_List) Set(i int, v CtrlPld) error { return s.List.SetStruct(i, v.Struct) }

func (s CtrlPld_List) String() string {
	str, _ := text.MarshalList(0x8e6af2c877489f54, s.List)
	return str
}

// CtrlPld_Promise is a wrapper for a CtrlPld promised by a client call.
type CtrlPld_Promise struct{ *capnp.Pipeline }

func (p CtrlPld_Promise) Struct() (CtrlPld, error) {
	s, err := p.Pipeline.Struct()
	return CtrlPld{s}, err
}

func (p CtrlPld_Promise) Pcb() PCB_Promise {
	return PCB_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p CtrlPld_Promise) Ifid() IFID_Promise {
	return IFID_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p CtrlPld_Promise) CertMgmt() CertMgmt_Promise {
	return CertMgmt_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p CtrlPld_Promise) PathMgmt() PathMgmt_Promise {
	return PathMgmt_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p CtrlPld_Promise) Sibra() SibraPayload_Promise {
	return SibraPayload_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p CtrlPld_Promise) DrkeyMgmt() DRKeyMgmt_Promise {
	return DRKeyMgmt_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p CtrlPld_Promise) Sig() SIGCtrl_Promise {
	return SIGCtrl_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p CtrlPld_Promise) Extn() CtrlExtnDataList_Promise {
	return CtrlExtnDataList_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p CtrlPld_Promise) Ack() Ack_Promise {
	return Ack_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p CtrlPld_Promise) Pln() PLN_Promise {
	return PLN_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p CtrlPld_Promise) Pgn() PGN_Promise {
	return PGN_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p CtrlPld_Promise) Ms() MS_Promise {
	return MS_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

const schema_df42b02816bdc1bf = "x\xdaD\xd2_h\x1cU\x18\x05\xf0sf\xf6o\xba" +
	"\xdb\x9d\xe1\x0e>\x14J\xb0\x14lJ\x95\xb6\x14\xc4\xa2" +
	"\xa8)\xc5\xa4\x10\xed:\x05\x1f\x04\xeb\xee\xcev]\xbb" +
	"Y\xd7\xd9\x91\xa6O\"\xc4\xbe)\x01[l\xa5\xc5\x16" +
	"\x04\x15\xaa\x18Xi+F\x13\x92\xc0*\x09D\x89!" +
	"B\xf0\xcf\x83/\xeaC\x8c\x89\xc6D\xbd\xe5\x1bv\x92" +
	"\xb7\xe5\xfc\xf6\xde\xf3\xdd\xe1;x\x1f\x1f3\xec\xf8-" +
	" \x9f\x8a'\xf4\xa9w\xfb\xce\xb5W^|\x13\xf9\x1c" +
	"\x0d\xfd\xe5\xc4\xd8=\xfb>\xe9\xfd\x11\xc7\x8dd\x16\xb0" +
	"\x1f\xff\xcc\xeeO\x02\x87\x8e?e\x82\xfa\xcar0:" +
	"4}b\x12v\x8e\xdb\x7f\x8d\x1bI@\xdd1\x7fU" +
	"\xd3\xa6\xfc\x9a0\xcf\x81\xba\x14\xf8\xb5\xd3\x8d\x9a\xc7\x07" +
	"J\x85F\xbdq\xf4\xd8\xa3\x81_;Y\xf3N\x92\xf9" +
	"\x87\xcdXF\xeb\x18\x01u\x89\x87\x01w\x84&\xdd\xab" +
	"4\x98\xe5\xff\xda\xa1\xc0\x15\xee\x01\xdc\x8b\x02\xd7\x05\x8c" +
	"\xff\xb4C\x03P\xd7\xb8\x1fp/\x0b\xbc'`\xfe\xab" +
	"\x1d\x9a\x80\xba\xc1\x13\x80{]\xe0\xa6@lS;\x8c" +
	"\x01\xea\xc3\x10>\x10h\x09\xc47\xb4\xc38\xa0F\xc3" +
	"\xf2\x9b\x02\xb7\x05\x12\xffh\x87\x09@}\xca\xa7\x01\xb7" +
	"%0.\x90\\\xd7\x0e\xe5mc\xe1T\xb7\x05\xa6\x04" +
	"R\x7fk\x87)yt8\xd5\xe7\x02m\x1a\xb4\xb3t" +
	"\x98\x06\xd4tX1.\xf9\x8c\xe4;\xe9\xb0\x0bP_" +
	"\xb1\x17p\xa7$\x9f\x93\x8b\xd2\x7fi\x87;\x005\x1b" +
	"6\xb4\x05\xe6\x05\xba\xd6\xb4\xc3\x0c\xa0\xbe\x09aF`" +
	"Q`\xc7\xaav\x98\x05\xd4w!\xcc\x09,\x09d\xfe" +
	"\xd4\x0ew\x02\xea{\xee\x02\xdcy\x81\x9fh\xb0\xfb\x95" +
	"z\xb3\x1c \x91l\x94\x8a\xb4\xf4/\xf9\xf3\x0f\x96\x9e" +
	"\x18_\x00H\x0b\xccU\xcfT=Z\xfaNO|]" +
	"m^\xba\xd6\x89u\xa9\xec\x07\x03\x95\xc1\x00\x00-\xfd" +
	"\xd0\xe2\xef\x17Z\x8d\x91\x1b\x916\x0a\xc1\x0b\xdb\xfa\xf5" +
	"\xdc;\x99\xde\x8d\x03\x91v7\xabE\xbf@K\x8fL" +
	"\x0e\x9f^k\x1fZ\x89Ny\xfe\xd9\xf2\xf9\x81\xca " +
	"\x18\xc8\xa9?\xd4\xe6\xc2\xad\xb1\xd1\x8e&\x9b\xd5\x0a-" +
	"\x9dz\xe4p\xb3g\xefs?G\xe3\x95\x87\x82:-" +
	"}f\xc2\xb8\xf0\xc5\xee\xe7g\xa3\x0a\xbf\xfcr\xbf\xc7" +
	"4\x0c\xa6\xc1W\x03\xbfP*\xf7{\xcc\xc2`\x16L" +
	"\x16Jgi\xe9\xa5\x8f\x8f|{\xf4\xf2G\xcbQA" +
	"\xa3&7\xbdu\xc0\xdcu\xb5v\xea\x87\xad\xb4\"\xe9" +
	"\x9eg\xfa\xde\xd8}\xef\xb3\xefwRs\xb0IK\xf7" +
	"\xbd\xde\x1a\xea\xfem\xf8\xed\xado\xd2\xd9m\xa3\xb3\xdb" +
	"n\xb5R/{\xc7\x02?\x17mx\xca\x8c\x01\xb2\xe0" +
	"v\xcf~ \xbf\xd7d\xfe\xa0A\x9b\x0c\x97\xdb\xbe_" +
	"\xc2}&\xf3G\x0c\xe6\x8a\xb5\x97\x8a\xd1\xc4\xb9f5" +
	"\x1c\xa3\xeb\xb5'W\xbd\x8b\x03\xc3\x9d\xc6\xbb\x01\x00\x00" +
	"\xff\xff8\xd3\xedl"

func init() {
	schemas.Register(schema_df42b02816bdc1bf,
		0x8e6af2c877489f54,
		0xc34ac578b174f099)
}
