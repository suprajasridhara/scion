// Code generated by capnpc-go. DO NOT EDIT.

package proto

import (
	strconv "strconv"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type SignedCtrlPld struct{ capnp.Struct }

// SignedCtrlPld_TypeID is the unique identifier for the type SignedCtrlPld.
const SignedCtrlPld_TypeID = 0xc34ac578b174f099

func NewSignedCtrlPld(s *capnp.Segment) (SignedCtrlPld, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SignedCtrlPld{st}, err
}

func NewRootSignedCtrlPld(s *capnp.Segment) (SignedCtrlPld, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SignedCtrlPld{st}, err
}

func ReadRootSignedCtrlPld(msg *capnp.Message) (SignedCtrlPld, error) {
	root, err := msg.RootPtr()
	return SignedCtrlPld{root.Struct()}, err
}

func (s SignedCtrlPld) String() string {
	str, _ := text.Marshal(0xc34ac578b174f099, s.Struct)
	return str
}

func (s SignedCtrlPld) Blob() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s SignedCtrlPld) HasBlob() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SignedCtrlPld) SetBlob(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s SignedCtrlPld) Sign() (Sign, error) {
	p, err := s.Struct.Ptr(1)
	return Sign{Struct: p.Struct()}, err
}

func (s SignedCtrlPld) HasSign() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s SignedCtrlPld) SetSign(v Sign) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewSign sets the sign field to a newly
// allocated Sign struct, preferring placement in s's segment.
func (s SignedCtrlPld) NewSign() (Sign, error) {
	ss, err := NewSign(s.Struct.Segment())
	if err != nil {
		return Sign{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// SignedCtrlPld_List is a list of SignedCtrlPld.
type SignedCtrlPld_List struct{ capnp.List }

// NewSignedCtrlPld creates a new list of SignedCtrlPld.
func NewSignedCtrlPld_List(s *capnp.Segment, sz int32) (SignedCtrlPld_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return SignedCtrlPld_List{l}, err
}

func (s SignedCtrlPld_List) At(i int) SignedCtrlPld { return SignedCtrlPld{s.List.Struct(i)} }

func (s SignedCtrlPld_List) Set(i int, v SignedCtrlPld) error { return s.List.SetStruct(i, v.Struct) }

func (s SignedCtrlPld_List) String() string {
	str, _ := text.MarshalList(0xc34ac578b174f099, s.List)
	return str
}

// SignedCtrlPld_Promise is a wrapper for a SignedCtrlPld promised by a client call.
type SignedCtrlPld_Promise struct{ *capnp.Pipeline }

func (p SignedCtrlPld_Promise) Struct() (SignedCtrlPld, error) {
	s, err := p.Pipeline.Struct()
	return SignedCtrlPld{s}, err
}

func (p SignedCtrlPld_Promise) Sign() Sign_Promise {
	return Sign_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

type CtrlPld struct{ capnp.Struct }
type CtrlPld_Which uint16

const (
	CtrlPld_Which_unset     CtrlPld_Which = 0
	CtrlPld_Which_pcb       CtrlPld_Which = 1
	CtrlPld_Which_ifid      CtrlPld_Which = 2
	CtrlPld_Which_certMgmt  CtrlPld_Which = 3
	CtrlPld_Which_pathMgmt  CtrlPld_Which = 4
	CtrlPld_Which_sibra     CtrlPld_Which = 5
	CtrlPld_Which_drkeyMgmt CtrlPld_Which = 6
	CtrlPld_Which_sig       CtrlPld_Which = 7
	CtrlPld_Which_extn      CtrlPld_Which = 8
	CtrlPld_Which_ack       CtrlPld_Which = 9
	CtrlPld_Which_ms        CtrlPld_Which = 10
	CtrlPld_Which_pln       CtrlPld_Which = 11
	CtrlPld_Which_pcn       CtrlPld_Which = 12
)

func (w CtrlPld_Which) String() string {
	const s = "unsetpcbifidcertMgmtpathMgmtsibradrkeyMgmtsigextnackmsplnpcn"
	switch w {
	case CtrlPld_Which_unset:
		return s[0:5]
	case CtrlPld_Which_pcb:
		return s[5:8]
	case CtrlPld_Which_ifid:
		return s[8:12]
	case CtrlPld_Which_certMgmt:
		return s[12:20]
	case CtrlPld_Which_pathMgmt:
		return s[20:28]
	case CtrlPld_Which_sibra:
		return s[28:33]
	case CtrlPld_Which_drkeyMgmt:
		return s[33:42]
	case CtrlPld_Which_sig:
		return s[42:45]
	case CtrlPld_Which_extn:
		return s[45:49]
	case CtrlPld_Which_ack:
		return s[49:52]
	case CtrlPld_Which_ms:
		return s[52:54]
	case CtrlPld_Which_pln:
		return s[54:57]
	case CtrlPld_Which_pcn:
		return s[57:60]

	}
	return "CtrlPld_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// CtrlPld_TypeID is the unique identifier for the type CtrlPld.
const CtrlPld_TypeID = 0x8e6af2c877489f54

func NewCtrlPld(s *capnp.Segment) (CtrlPld, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return CtrlPld{st}, err
}

func NewRootCtrlPld(s *capnp.Segment) (CtrlPld, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return CtrlPld{st}, err
}

func ReadRootCtrlPld(msg *capnp.Message) (CtrlPld, error) {
	root, err := msg.RootPtr()
	return CtrlPld{root.Struct()}, err
}

func (s CtrlPld) String() string {
	str, _ := text.Marshal(0x8e6af2c877489f54, s.Struct)
	return str
}

func (s CtrlPld) Which() CtrlPld_Which {
	return CtrlPld_Which(s.Struct.Uint16(0))
}
func (s CtrlPld) SetUnset() {
	s.Struct.SetUint16(0, 0)

}

func (s CtrlPld) Pcb() (PCB, error) {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != pcb")
	}
	p, err := s.Struct.Ptr(0)
	return PCB{Struct: p.Struct()}, err
}

func (s CtrlPld) HasPcb() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CtrlPld) SetPcb(v PCB) error {
	s.Struct.SetUint16(0, 1)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewPcb sets the pcb field to a newly
// allocated PCB struct, preferring placement in s's segment.
func (s CtrlPld) NewPcb() (PCB, error) {
	s.Struct.SetUint16(0, 1)
	ss, err := NewPCB(s.Struct.Segment())
	if err != nil {
		return PCB{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s CtrlPld) Ifid() (IFID, error) {
	if s.Struct.Uint16(0) != 2 {
		panic("Which() != ifid")
	}
	p, err := s.Struct.Ptr(0)
	return IFID{Struct: p.Struct()}, err
}

func (s CtrlPld) HasIfid() bool {
	if s.Struct.Uint16(0) != 2 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CtrlPld) SetIfid(v IFID) error {
	s.Struct.SetUint16(0, 2)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewIfid sets the ifid field to a newly
// allocated IFID struct, preferring placement in s's segment.
func (s CtrlPld) NewIfid() (IFID, error) {
	s.Struct.SetUint16(0, 2)
	ss, err := NewIFID(s.Struct.Segment())
	if err != nil {
		return IFID{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s CtrlPld) CertMgmt() (CertMgmt, error) {
	if s.Struct.Uint16(0) != 3 {
		panic("Which() != certMgmt")
	}
	p, err := s.Struct.Ptr(0)
	return CertMgmt{Struct: p.Struct()}, err
}

func (s CtrlPld) HasCertMgmt() bool {
	if s.Struct.Uint16(0) != 3 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CtrlPld) SetCertMgmt(v CertMgmt) error {
	s.Struct.SetUint16(0, 3)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewCertMgmt sets the certMgmt field to a newly
// allocated CertMgmt struct, preferring placement in s's segment.
func (s CtrlPld) NewCertMgmt() (CertMgmt, error) {
	s.Struct.SetUint16(0, 3)
	ss, err := NewCertMgmt(s.Struct.Segment())
	if err != nil {
		return CertMgmt{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s CtrlPld) PathMgmt() (PathMgmt, error) {
	if s.Struct.Uint16(0) != 4 {
		panic("Which() != pathMgmt")
	}
	p, err := s.Struct.Ptr(0)
	return PathMgmt{Struct: p.Struct()}, err
}

func (s CtrlPld) HasPathMgmt() bool {
	if s.Struct.Uint16(0) != 4 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CtrlPld) SetPathMgmt(v PathMgmt) error {
	s.Struct.SetUint16(0, 4)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewPathMgmt sets the pathMgmt field to a newly
// allocated PathMgmt struct, preferring placement in s's segment.
func (s CtrlPld) NewPathMgmt() (PathMgmt, error) {
	s.Struct.SetUint16(0, 4)
	ss, err := NewPathMgmt(s.Struct.Segment())
	if err != nil {
		return PathMgmt{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s CtrlPld) Sibra() (SibraPayload, error) {
	if s.Struct.Uint16(0) != 5 {
		panic("Which() != sibra")
	}
	p, err := s.Struct.Ptr(0)
	return SibraPayload{Struct: p.Struct()}, err
}

func (s CtrlPld) HasSibra() bool {
	if s.Struct.Uint16(0) != 5 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CtrlPld) SetSibra(v SibraPayload) error {
	s.Struct.SetUint16(0, 5)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSibra sets the sibra field to a newly
// allocated SibraPayload struct, preferring placement in s's segment.
func (s CtrlPld) NewSibra() (SibraPayload, error) {
	s.Struct.SetUint16(0, 5)
	ss, err := NewSibraPayload(s.Struct.Segment())
	if err != nil {
		return SibraPayload{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s CtrlPld) DrkeyMgmt() (DRKeyMgmt, error) {
	if s.Struct.Uint16(0) != 6 {
		panic("Which() != drkeyMgmt")
	}
	p, err := s.Struct.Ptr(0)
	return DRKeyMgmt{Struct: p.Struct()}, err
}

func (s CtrlPld) HasDrkeyMgmt() bool {
	if s.Struct.Uint16(0) != 6 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CtrlPld) SetDrkeyMgmt(v DRKeyMgmt) error {
	s.Struct.SetUint16(0, 6)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewDrkeyMgmt sets the drkeyMgmt field to a newly
// allocated DRKeyMgmt struct, preferring placement in s's segment.
func (s CtrlPld) NewDrkeyMgmt() (DRKeyMgmt, error) {
	s.Struct.SetUint16(0, 6)
	ss, err := NewDRKeyMgmt(s.Struct.Segment())
	if err != nil {
		return DRKeyMgmt{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s CtrlPld) Sig() (SIGCtrl, error) {
	if s.Struct.Uint16(0) != 7 {
		panic("Which() != sig")
	}
	p, err := s.Struct.Ptr(0)
	return SIGCtrl{Struct: p.Struct()}, err
}

func (s CtrlPld) HasSig() bool {
	if s.Struct.Uint16(0) != 7 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CtrlPld) SetSig(v SIGCtrl) error {
	s.Struct.SetUint16(0, 7)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSig sets the sig field to a newly
// allocated SIGCtrl struct, preferring placement in s's segment.
func (s CtrlPld) NewSig() (SIGCtrl, error) {
	s.Struct.SetUint16(0, 7)
	ss, err := NewSIGCtrl(s.Struct.Segment())
	if err != nil {
		return SIGCtrl{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s CtrlPld) Extn() (CtrlExtnDataList, error) {
	if s.Struct.Uint16(0) != 8 {
		panic("Which() != extn")
	}
	p, err := s.Struct.Ptr(0)
	return CtrlExtnDataList{Struct: p.Struct()}, err
}

func (s CtrlPld) HasExtn() bool {
	if s.Struct.Uint16(0) != 8 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CtrlPld) SetExtn(v CtrlExtnDataList) error {
	s.Struct.SetUint16(0, 8)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewExtn sets the extn field to a newly
// allocated CtrlExtnDataList struct, preferring placement in s's segment.
func (s CtrlPld) NewExtn() (CtrlExtnDataList, error) {
	s.Struct.SetUint16(0, 8)
	ss, err := NewCtrlExtnDataList(s.Struct.Segment())
	if err != nil {
		return CtrlExtnDataList{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s CtrlPld) Ack() (Ack, error) {
	if s.Struct.Uint16(0) != 9 {
		panic("Which() != ack")
	}
	p, err := s.Struct.Ptr(0)
	return Ack{Struct: p.Struct()}, err
}

func (s CtrlPld) HasAck() bool {
	if s.Struct.Uint16(0) != 9 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CtrlPld) SetAck(v Ack) error {
	s.Struct.SetUint16(0, 9)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewAck sets the ack field to a newly
// allocated Ack struct, preferring placement in s's segment.
func (s CtrlPld) NewAck() (Ack, error) {
	s.Struct.SetUint16(0, 9)
	ss, err := NewAck(s.Struct.Segment())
	if err != nil {
		return Ack{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s CtrlPld) Ms() (MS, error) {
	if s.Struct.Uint16(0) != 10 {
		panic("Which() != ms")
	}
	p, err := s.Struct.Ptr(0)
	return MS{Struct: p.Struct()}, err
}

func (s CtrlPld) HasMs() bool {
	if s.Struct.Uint16(0) != 10 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CtrlPld) SetMs(v MS) error {
	s.Struct.SetUint16(0, 10)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewMs sets the ms field to a newly
// allocated MS struct, preferring placement in s's segment.
func (s CtrlPld) NewMs() (MS, error) {
	s.Struct.SetUint16(0, 10)
	ss, err := NewMS(s.Struct.Segment())
	if err != nil {
		return MS{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s CtrlPld) Pln() (PLN, error) {
	if s.Struct.Uint16(0) != 11 {
		panic("Which() != pln")
	}
	p, err := s.Struct.Ptr(0)
	return PLN{Struct: p.Struct()}, err
}

func (s CtrlPld) HasPln() bool {
	if s.Struct.Uint16(0) != 11 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CtrlPld) SetPln(v PLN) error {
	s.Struct.SetUint16(0, 11)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewPln sets the pln field to a newly
// allocated PLN struct, preferring placement in s's segment.
func (s CtrlPld) NewPln() (PLN, error) {
	s.Struct.SetUint16(0, 11)
	ss, err := NewPLN(s.Struct.Segment())
	if err != nil {
		return PLN{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s CtrlPld) Pcn() (PCN, error) {
	if s.Struct.Uint16(0) != 12 {
		panic("Which() != pcn")
	}
	p, err := s.Struct.Ptr(0)
	return PCN{Struct: p.Struct()}, err
}

func (s CtrlPld) HasPcn() bool {
	if s.Struct.Uint16(0) != 12 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CtrlPld) SetPcn(v PCN) error {
	s.Struct.SetUint16(0, 12)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewPcn sets the pcn field to a newly
// allocated PCN struct, preferring placement in s's segment.
func (s CtrlPld) NewPcn() (PCN, error) {
	s.Struct.SetUint16(0, 12)
	ss, err := NewPCN(s.Struct.Segment())
	if err != nil {
		return PCN{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s CtrlPld) ReqId() uint64 {
	return s.Struct.Uint64(8)
}

func (s CtrlPld) SetReqId(v uint64) {
	s.Struct.SetUint64(8, v)
}

func (s CtrlPld) TraceId() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s CtrlPld) HasTraceId() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s CtrlPld) SetTraceId(v []byte) error {
	return s.Struct.SetData(1, v)
}

// CtrlPld_List is a list of CtrlPld.
type CtrlPld_List struct{ capnp.List }

// NewCtrlPld creates a new list of CtrlPld.
func NewCtrlPld_List(s *capnp.Segment, sz int32) (CtrlPld_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2}, sz)
	return CtrlPld_List{l}, err
}

func (s CtrlPld_List) At(i int) CtrlPld { return CtrlPld{s.List.Struct(i)} }

func (s CtrlPld_List) Set(i int, v CtrlPld) error { return s.List.SetStruct(i, v.Struct) }

func (s CtrlPld_List) String() string {
	str, _ := text.MarshalList(0x8e6af2c877489f54, s.List)
	return str
}

// CtrlPld_Promise is a wrapper for a CtrlPld promised by a client call.
type CtrlPld_Promise struct{ *capnp.Pipeline }

func (p CtrlPld_Promise) Struct() (CtrlPld, error) {
	s, err := p.Pipeline.Struct()
	return CtrlPld{s}, err
}

func (p CtrlPld_Promise) Pcb() PCB_Promise {
	return PCB_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p CtrlPld_Promise) Ifid() IFID_Promise {
	return IFID_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p CtrlPld_Promise) CertMgmt() CertMgmt_Promise {
	return CertMgmt_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p CtrlPld_Promise) PathMgmt() PathMgmt_Promise {
	return PathMgmt_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p CtrlPld_Promise) Sibra() SibraPayload_Promise {
	return SibraPayload_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p CtrlPld_Promise) DrkeyMgmt() DRKeyMgmt_Promise {
	return DRKeyMgmt_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p CtrlPld_Promise) Sig() SIGCtrl_Promise {
	return SIGCtrl_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p CtrlPld_Promise) Extn() CtrlExtnDataList_Promise {
	return CtrlExtnDataList_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p CtrlPld_Promise) Ack() Ack_Promise {
	return Ack_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p CtrlPld_Promise) Ms() MS_Promise {
	return MS_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p CtrlPld_Promise) Pln() PLN_Promise {
	return PLN_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p CtrlPld_Promise) Pcn() PCN_Promise {
	return PCN_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

const schema_df42b02816bdc1bf = "x\xdaD\xd2Mh\x1cu\x18\x06\xf0\xe7\x99\xd9\xcft" +
	"\xb7;\xc3\x7f\xf4 hA\x8a6EKZ\x0abQ" +
	"\xd4\x94\xa2)D\xb3\x8e\xe7\xc6\xdd\x99\xed\xbav\xb3\x8e" +
	"\xb3#mA\x10\xa1\x14O\x92C\x03\xadXl\xa5\x07" +
	"\x85*\x06\"m\xc5hB\x1b\\\xa5\x85(\xb5F\x09" +
	"\xa8\x07/\xe2!\x89\x89\xe6C\xfd\xcb;\xec$\xb7\xe5" +
	"\xf9\xed;\xcf;\xc3\xdb\xf7 \x9f4\xec\xf4\x15\xa0\x9c" +
	"Kg\xf4\x0b\xef=s\xbc\xb3\xf4\xf2\xdb(\x97h\xe8" +
	"/\xa7'\xef\xde\xf5I\xff\xcf8dd\x8b\x80\xfd\xd4" +
	"g\xf6@\x16\xd8{\xe89\x13\xd4\xe7\x16\xa2\xf1\x133" +
	"\x87\xaf\xc3.q\xeb\xafi#\x0b\xa8k\xe6\xefj\xc6" +
	"\x94_\xd3\xe6qP{Q\xd8\x1c\x0e\x9a>\xf7x\x95" +
	"\xa0\x15\x1c8\xf8D\x146\x87\x9a\xfe\x10Y~\xccL" +
	"\x15\xb4N\x11Pc\xdc\x07\xb8\xa34\xe9\xbeK\x83E" +
	"\xfe\xa7\x1d\x0a\x9c\xe3\xfd\x80{F\xe0\x82\x80\xf1\xafv" +
	"h\x00\xea<w\x03\xeeY\x81K\x02\xe6?\xda\xa1\x09" +
	"\xa8\x8b<\x0c\xb8\x17\x04.\x0b\xa46\xb4\xc3\x14\xa0>" +
	"\x8c\xe1\x03\x81\x09\x81\xf4\xbav\x98\x06\xd4x\\~Y" +
	"\xe0\xaa@fM;\xcc\x00\xeaS>\x0f\xb8\x13\x02S" +
	"\x02\xd9U\xedP\xdem2\xde\xea\xaa\xc0\x0d\x81\xdc\xdf" +
	"\xdaaN^:\xde\xeas\x81\x0e\x0d\xdaE:\xcc\x03" +
	"j&\xae\x98\x92\xfc\xa6\xe4\xdb\xe9\xb0\x07P_\xb3\x1f" +
	"poH>+\x0f\xca\xff\xa5\x1dn\x03\xd4\xad\xb8\xa1" +
	"#p[\xa0gE;,\x00\xea[\xde\x03\xb87\x05" +
	"\xe6\x04\xb6-k\x87E@}\x1fO\xcc\x0a\xcc\x0b\x14" +
	"\xfe\xd4\x0e\xb7\x03\xea\xc7\x18n\x0b\xfcB\x83;^k" +
	"\xb5k\x112\xd9\xc0\xab\xd2\xd2\xbf\x95O>\xe2==" +
	"u\x07 -\xb0\xd48\xda\xf0i\xe9k\xbd\xe9U\xb5" +
	"1v\xbe\x1bk\xaf\x16F\x83\xf5\x91\x08\x00-\xfd\xe8" +
	"\xdc\x1f\xa7'\x82\xd1\x8b\x89\x06\x95\xe8\xa5-\xfdf\xf6" +
	"\x9dB\xff\xfaC\x89\xeeh7\xaaa\x85\x96\x1e\xbd~" +
	"jx\xa5\xb3w)\x99\xf2\xc3c\xb5\x93\x83\xf5\x110" +
	"\x92\xa9E\xb5q\xe7\xca\xe4xW\xb3\xedF\x9d\x96\xce" +
	"=\xbe\xaf\xdd\xbb\xf3\xc8\xaf\xc9z\xb5\x13Q\x8b\x96>" +
	":m\x9c\xfe\xe2\xde\x17o%\x15a\xed\xd5\x01\x9fy" +
	"\x18\xcc\x83oDa\xc5\xab\x0d\xf8,\xc2`\x11\xccV" +
	"\xbcc\xb4\xf4\xfc\xc7\xfb\xbf;p\xf6\xa3\x85\xee\x8c9" +
	"\xd2\xa6\xa5_\x7f XX\x1b\xbe\xeb\xa7\xa45h\xca" +
	"\xe3\xdf\x1f;\x92Z\xeck\xfd\xb0\x99z\x92\xbeui" +
	"\xcf}\xce\xd0W\x9d\xcdo\xd2\xbdm\xa3{\xdbn\xa3" +
	"\xde\xaa\xf9\x07\xa3\xb0\x94\\x\xceL\x01r\xe0v\xef" +
	"n\xa0\xbc\xd3d\xb9\xcf\xa0M\xc6\xc7m?,\xe1." +
	"\x93\xe5\xfd\x06K\xd5\xe6+\xd5d\xe3R\xbbQ\x97\xc6" +
	"\x9e7\x9f]\xf6\xcf\x0c\x9e\xea6\xfe\x1f\x00\x00\xff\xff" +
	"wX\xefY"

func init() {
	schemas.Register(schema_df42b02816bdc1bf,
		0x8e6af2c877489f54,
		0xc34ac578b174f099)
}
